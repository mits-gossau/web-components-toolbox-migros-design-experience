{"version":3,"names":["accordionGroupCss","isHTMLMdxAccordionItemElement","element","item","AccordionContainer","onAccordionChange","this","accordionChange","emit","selectedAccordion","activeAccordion","getItems","accordions","forEach","accordion","open","Array","from","host","querySelectorAll","find","t","select","render","h","Host","onAccordionClick","detail","name"],"sources":["src/components/accordion-group/accordion-group.scss?tag=mdx-accordion-group&encapsulation=shadow","src/components/accordion-group/accordion-group.tsx"],"sourcesContent":[":host {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: var(--mdx-comp-accordion-gap-accordion-elements);\n  padding: 0;\n}\n","import { Component, Element, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\n\nconst isHTMLMdxAccordionItemElement = (element: string | HTMLMdxAccordionElement): element is HTMLMdxAccordionElement => {\n  if (typeof element === 'object' && typeof element.item === 'string') {\n    return true;\n  }\n  return false;\n};\n\n@Component({\n  tag: 'mdx-accordion-group',\n  styleUrl: 'accordion-group.scss',\n  shadow: true,\n})\nexport class AccordionContainer {\n  @Element()\n  host: HTMLMdxAccordionGroupElement;\n\n  @Prop({ reflect: true })\n  selectedAccordion: HTMLMdxAccordionElement['item'];\n\n  @Event()\n  accordionChange: EventEmitter<HTMLMdxAccordionElement['item']>;\n\n  @Watch('selectedAccordion')\n  onAccordionChange() {\n    this.accordionChange.emit(this.selectedAccordion);\n\n    if (this.selectedAccordion) {\n      const activeAccordion = this.getItems(this.selectedAccordion);\n      this.accordions.forEach((accordion) => {\n        if (activeAccordion?.item !== accordion.item) {\n          accordion.open = false;\n        }\n      });\n    }\n  }\n\n  private get accordions() {\n    return Array.from(this.host.querySelectorAll('mdx-accordion'));\n  }\n\n  private getItems(accordion: string | HTMLMdxAccordionElement): HTMLMdxAccordionElement | undefined {\n    return isHTMLMdxAccordionItemElement(accordion) ? accordion : this.accordions.find((t) => t.item === accordion);\n  }\n\n  private select(item: string | undefined) {\n    if (this.selectedAccordion === item) {\n      return false;\n    }\n    this.selectedAccordion = item;\n    return true;\n  }\n\n  render() {\n    return (\n      <Host\n        onAccordionClick={({ detail: { item, open } }) => {\n          if (open) {\n            this.select(item);\n          }\n        }}\n      >\n        <slot name=\"accordions\"></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"gEAAA,MAAMA,EAAoB,iICE1B,MAAMC,EAAiCC,IACrC,UAAWA,IAAY,iBAAmBA,EAAQC,OAAS,SAAU,CACnE,OAAO,I,CAET,OAAO,KAAK,E,MAQDC,EAAkB,M,2GAW7B,iBAAAC,GACEC,KAAKC,gBAAgBC,KAAKF,KAAKG,mBAE/B,GAAIH,KAAKG,kBAAmB,CAC1B,MAAMC,EAAkBJ,KAAKK,SAASL,KAAKG,mBAC3CH,KAAKM,WAAWC,SAASC,IACvB,IAAIJ,IAAe,MAAfA,SAAe,SAAfA,EAAiBP,QAASW,EAAUX,KAAM,CAC5CW,EAAUC,KAAO,K,MAMzB,cAAYH,GACV,OAAOI,MAAMC,KAAKX,KAAKY,KAAKC,iBAAiB,iB,CAGvC,QAAAR,CAASG,GACf,OAAOb,EAA8Ba,GAAaA,EAAYR,KAAKM,WAAWQ,MAAMC,GAAMA,EAAElB,OAASW,G,CAG/F,MAAAQ,CAAOnB,GACb,GAAIG,KAAKG,oBAAsBN,EAAM,CACnC,OAAO,K,CAETG,KAAKG,kBAAoBN,EACzB,OAAO,I,CAGT,MAAAoB,GACE,OACEC,EAACC,EAAI,CACHC,iBAAkB,EAAGC,QAAUxB,OAAMY,YACnC,GAAIA,EAAM,CACRT,KAAKgB,OAAOnB,E,IAIhBqB,EAAA,QAAMI,KAAK,e"}