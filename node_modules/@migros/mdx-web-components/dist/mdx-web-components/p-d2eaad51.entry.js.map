{"version":3,"names":["filterGroupCss","MdxFilterGroupStyle0","FilterGroup","toggleCheckboxHandler","detail","this","selectedItems","Object","assign","categoryChanged","filters","forEach","filter","updatedItems","keys","includes","filterId","componentDidLoad","Array","from","host","querySelectorAll","render","h","Host","key","buttonLabel","headerTitle","resetAllLinkText","backButtonText","selectAllLinkText","resetLinkText","submitButtonText","closeButtonAriaLabel","map","name","buttonSelectLabel","slot","checkbox","variant","CHECKBOX_VARIANTS","NO_BORDER","label","value","checked"],"sources":["src/components/filter/filter-group/filter-group.scss?tag=mdx-filter-group&encapsulation=shadow","src/components/filter/filter-group/filter-group.tsx"],"sourcesContent":[":host {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  @media only screen and (max-width: 768px) {\n    overflow-x: scroll;\n    scrollbar-width: none;\n\n    :-webkit-scrollbar {\n      display: none; /* Safari and Chrome */\n    }\n  }\n\n  @media only screen and (min-width: 768px) {\n    flex-wrap: wrap;\n  }\n}\n","import { Component, Element, Host, Listen, Prop, State, h } from '@stencil/core';\nimport { CHECKBOX_VARIANTS } from '../../checkbox/export';\n\n/**\n * @slot - for the different filters\n */\n\n@Component({\n  tag: 'mdx-filter-group',\n  styleUrl: 'filter-group.scss',\n  shadow: true,\n})\nexport class FilterGroup {\n  @Element()\n  host: HTMLMdxFilterGroupElement;\n\n  @Prop()\n  buttonLabel: string;\n\n  @Prop()\n  headerTitle: string;\n\n  @Prop()\n  submitButtonText: string;\n\n  @Prop()\n  backButtonText: string;\n\n  @Prop()\n  resetLinkText: string;\n\n  @Prop()\n  resetAllLinkText: string;\n\n  @Prop()\n  selectAllLinkText: string;\n\n  @Prop()\n  closeButtonAriaLabel!: string;\n\n  @State()\n  filters: HTMLMdxFilterElement[] = [];\n\n  @State()\n  selectedItems: Record<string, { label: string; value: string }[]> = {};\n\n  @Listen('filterChanged')\n  toggleCheckboxHandler({ detail }: CustomEvent<Record<string, { label: string; value: string }[]>>) {\n    this.selectedItems = { ...this.selectedItems, ...detail };\n  }\n\n  @Listen('filterCategoryChanged')\n  categoryChanged({ detail }: CustomEvent<Record<string, { label: string; value: string }[]>>) {\n    this.filters.forEach((filter) => {\n      const updatedItems = Object.keys(detail).includes(filter.filterId) ? detail[filter.filterId] : [];\n\n      this.selectedItems = {\n        ...this.selectedItems,\n        [filter.filterId]: updatedItems,\n      };\n\n      filter.selectedItems = {\n        [filter.filterId]: updatedItems,\n      };\n    });\n  }\n\n  componentDidLoad() {\n    this.filters = Array.from(this.host.querySelectorAll('mdx-filter') || []);\n  }\n\n  render() {\n    return (\n      <Host>\n        <mdx-filter-category\n          buttonLabel={this.buttonLabel}\n          headerTitle={this.headerTitle}\n          resetAllLinkText={this.resetAllLinkText}\n          backButtonText={this.backButtonText}\n          selectAllLinkText={this.selectAllLinkText}\n          resetLinkText={this.resetLinkText}\n          submitButtonText={this.submitButtonText}\n          closeButtonAriaLabel={this.closeButtonAriaLabel}\n          selectedItems={this.selectedItems}\n        >\n          {this.filters.map((filter) => (\n            <mdx-filter-category-item name={filter.buttonSelectLabel} slot=\"categories\" category-id={`${filter.filterId}`}>\n              {Array.from(filter.querySelectorAll('mdx-checkbox')).map((checkbox) => {\n                return (\n                  <mdx-checkbox\n                    variant={CHECKBOX_VARIANTS.NO_BORDER}\n                    label={checkbox.label}\n                    value={checkbox.value}\n                    checked={checkbox.checked}\n                    slot=\"items\"\n                  />\n                );\n              })}\n            </mdx-filter-category-item>\n          ))}\n        </mdx-filter-category>\n        <slot name=\"filters\" />\n      </Host>\n    );\n  }\n}\n"],"mappings":"6FAAA,MAAMA,EAAiB,4PACvB,MAAAC,EAAeD,E,MCWFE,EAAW,M,4RA6BY,G,mBAGkC,E,CAGpE,qBAAAC,EAAsBC,OAAEA,IACtBC,KAAKC,cAAaC,OAAAC,OAAAD,OAAAC,OAAA,GAAQH,KAAKC,eAAkBF,E,CAInD,eAAAK,EAAgBL,OAAEA,IAChBC,KAAKK,QAAQC,SAASC,IACpB,MAAMC,EAAeN,OAAOO,KAAKV,GAAQW,SAASH,EAAOI,UAAYZ,EAAOQ,EAAOI,UAAY,GAE/FX,KAAKC,cAAaC,OAAAC,OAAAD,OAAAC,OAAA,GACbH,KAAKC,eAAa,CACrB,CAACM,EAAOI,UAAWH,IAGrBD,EAAON,cAAgB,CACrB,CAACM,EAAOI,UAAWH,EACpB,G,CAIL,gBAAAI,GACEZ,KAAKK,QAAUQ,MAAMC,KAAKd,KAAKe,KAAKC,iBAAiB,eAAiB,G,CAGxE,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,uBAAAE,IAAA,2CACEC,YAAarB,KAAKqB,YAClBC,YAAatB,KAAKsB,YAClBC,iBAAkBvB,KAAKuB,iBACvBC,eAAgBxB,KAAKwB,eACrBC,kBAAmBzB,KAAKyB,kBACxBC,cAAe1B,KAAK0B,cACpBC,iBAAkB3B,KAAK2B,iBACvBC,qBAAsB5B,KAAK4B,qBAC3B3B,cAAeD,KAAKC,eAEnBD,KAAKK,QAAQwB,KAAKtB,GACjBW,EAAA,4BAA0BY,KAAMvB,EAAOwB,kBAAmBC,KAAK,aAAY,cAAc,GAAGzB,EAAOI,YAChGE,MAAMC,KAAKP,EAAOS,iBAAiB,iBAAiBa,KAAKI,GAEtDf,EAAA,gBACEgB,QAASC,EAAkBC,UAC3BC,MAAOJ,EAASI,MAChBC,MAAOL,EAASK,MAChBC,QAASN,EAASM,QAClBP,KAAK,gBAOjBd,EAAA,QAAAE,IAAA,2CAAMU,KAAK,Y"}