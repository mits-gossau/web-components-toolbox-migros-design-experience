{"version":3,"names":["filterCss","Filter","handleOutsideClick","event","this","open","hostElement","contains","target","selectButtonClickHandler","toggleCheckboxHandler","detail","checked","selectedItems","filter","item","value","find","label","filterChanged","emit","selectClearHandler","querySelectorAll","forEach","checkbox","filterFlyoutCloseHandler","render","h","Host","buttonSelectLabel","buttonSelectAriaLabel","clearButtonSelectAriaLabel","selectedOptions","map","role","headerTitle","closeButtonAriaLabel","slot","length","size","BADGE_SIZES","MD","variant","BADGE_VARIANTS","SECONDARY","LINK_VARIANTS","STANDALONE","onClick","selectAllLinkText","class","width","height","viewBox","fill","xmlns","cx","cy","r","resetLinkText","filterSubmit","submitButtonText"],"sources":["src/components/filter/filter.scss?tag=mdx-filter&encapsulation=shadow","src/components/filter/filter.tsx"],"sourcesContent":[":host {\n  width: var(--mdx-comp-filter-flyout-sizing-width);\n  display: block;\n  position: relative;\n\n  mdx-filter-flyout {\n    position: absolute;\n    width: var(--mdx-comp-filter-flyout-sizing-width);\n    max-height: 0;\n    overflow: hidden;\n    transition: var(--mdx-comp-flyout-transition-expand-collapse);\n  }\n}\n\n:host([open]) mdx-filter-flyout {\n  max-height: 100vh;\n  box-shadow: var(--mdx-comp-flyout-box-shadow-default);\n  transition: var(--mdx-comp-flyout-transition-expand-collapse);\n}\n","import { Component, Element, Event, EventEmitter, Host, Listen, Prop, State, h } from '@stencil/core';\nimport { BADGE_SIZES, BADGE_VARIANTS } from '../badge/exports';\nimport { LINK_VARIANTS } from '../link/exports';\n\n@Component({\n  tag: 'mdx-filter',\n  styleUrl: 'filter.scss',\n  shadow: true,\n})\nexport class Filter {\n  @Prop({ reflect: true })\n  open = false;\n\n  @Prop()\n  closeButtonAriaLabel: string;\n\n  @Prop()\n  buttonSelectLabel: string;\n\n  @Prop()\n  buttonSelectAriaLabel: string;\n\n  @Prop()\n  clearButtonSelectAriaLabel: string;\n\n  @Prop()\n  headerTitle: string;\n\n  @Prop()\n  submitButtonText: string;\n\n  @Prop()\n  selectAllLinkText: string;\n\n  @Prop()\n  resetLinkText: string;\n\n  @State()\n  selectedItems: { label: string; value?: string }[] = [];\n\n  @Element()\n  hostElement: HTMLMdxFilterElement;\n\n  @Event()\n  filterChanged: EventEmitter<typeof this.selectedItems>;\n\n  @Event()\n  filterSubmit: EventEmitter<typeof this.selectedItems>;\n\n  @Listen('click', { target: 'window' })\n  handleOutsideClick(event: MouseEvent) {\n    if (this.open && !this.hostElement.contains(event.target as Node)) {\n      this.open = false;\n    }\n  }\n\n  @Listen('selectButtonClick')\n  selectButtonClickHandler() {\n    this.open = !this.open;\n  }\n\n  @Listen('toggleCheckbox')\n  toggleCheckboxHandler(event: CustomEvent<{ checked: boolean; value?: string; label: string }>) {\n    if (!event.detail.checked) {\n      this.selectedItems = this.selectedItems.filter((item) => item.value !== event.detail.value);\n    } else if (event.detail.checked && !this.selectedItems.find((item) => item.value === event.detail.value)) {\n      this.selectedItems = [...this.selectedItems, { label: event.detail.label, value: event.detail.value }];\n    }\n    this.filterChanged.emit(this.selectedItems);\n  }\n\n  @Listen('selectClear')\n  selectClearHandler() {\n    this.selectedItems = [];\n    this.hostElement.querySelectorAll('mdx-checkbox').forEach((checkbox) => {\n      checkbox.checked = false;\n    });\n    this.filterChanged.emit(this.selectedItems);\n  }\n\n  @Listen('filterFlyoutClose')\n  filterFlyoutCloseHandler() {\n    this.open = false;\n  }\n\n  render() {\n    return (\n      <Host>\n        <mdx-filter-select\n          label={this.buttonSelectLabel}\n          button-aria-label={this.buttonSelectAriaLabel}\n          clear-button-aria-label={this.clearButtonSelectAriaLabel}\n          selectedOptions={this.selectedItems.map((item) => item.label)}\n          open={this.open}\n        ></mdx-filter-select>\n        <mdx-filter-flyout open={this.open} role=\"dialog\" aria-label={this.headerTitle}>\n          <mdx-filter-flyout-header closeButtonAriaLabel={this.closeButtonAriaLabel}>\n            <h2 slot=\"header\">{this.headerTitle}</h2>\n            {this.selectedItems.length > 0 ? (\n              <mdx-badge slot=\"header\" size={BADGE_SIZES.MD} variant={BADGE_VARIANTS.SECONDARY}>\n                {this.selectedItems.length}\n              </mdx-badge>\n            ) : null}\n          </mdx-filter-flyout-header>\n          <mdx-filter-flyout-list>\n            <mdx-link\n              slot=\"controls\"\n              variant={LINK_VARIANTS.STANDALONE}\n              onClick={() => {\n                this.hostElement.querySelectorAll('mdx-checkbox').forEach((checkbox) => {\n                  checkbox.checked = true;\n                  if (!this.selectedItems.find((item) => item.value === checkbox.value)) {\n                    this.selectedItems = [...this.selectedItems, { label: checkbox.label, value: checkbox.value }];\n                  }\n                });\n                this.filterChanged.emit(this.selectedItems);\n              }}\n            >\n              {this.selectAllLinkText}\n            </mdx-link>\n            <svg\n              class=\"filter-category__dot-spacer\"\n              width=\"2\"\n              height=\"2\"\n              slot=\"controls\"\n              viewBox=\"0 0 2 2\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <circle cx=\"1\" cy=\"1\" r=\"1\" fill=\"currentColor\" />\n            </svg>\n            <mdx-link slot=\"controls\" variant={LINK_VARIANTS.STANDALONE} onClick={() => this.selectClearHandler()}>\n              {this.resetLinkText}\n            </mdx-link>\n            <slot slot=\"items\" />\n          </mdx-filter-flyout-list>\n          <mdx-filter-flyout-footer>\n            <mdx-button\n              full-width\n              slot=\"button\"\n              onClick={() => {\n                this.filterSubmit.emit(this.selectedItems);\n                this.open = false;\n              }}\n            >\n              {this.submitButtonText}\n            </mdx-button>\n          </mdx-filter-flyout-footer>\n        </mdx-filter-flyout>\n      </Host>\n    );\n  }\n}\n"],"mappings":"+IAAA,MAAMA,EAAY,kb,MCSLC,EAAM,M,2HAEV,M,gSA2B8C,E,CAYrD,kBAAAC,CAAmBC,GACjB,GAAIC,KAAKC,OAASD,KAAKE,YAAYC,SAASJ,EAAMK,QAAiB,CACjEJ,KAAKC,KAAO,K,EAKhB,wBAAAI,GACEL,KAAKC,MAAQD,KAAKC,I,CAIpB,qBAAAK,CAAsBP,GACpB,IAAKA,EAAMQ,OAAOC,QAAS,CACzBR,KAAKS,cAAgBT,KAAKS,cAAcC,QAAQC,GAASA,EAAKC,QAAUb,EAAMQ,OAAOK,O,MAChF,GAAIb,EAAMQ,OAAOC,UAAYR,KAAKS,cAAcI,MAAMF,GAASA,EAAKC,QAAUb,EAAMQ,OAAOK,QAAQ,CACxGZ,KAAKS,cAAgB,IAAIT,KAAKS,cAAe,CAAEK,MAAOf,EAAMQ,OAAOO,MAAOF,MAAOb,EAAMQ,OAAOK,O,CAEhGZ,KAAKe,cAAcC,KAAKhB,KAAKS,c,CAI/B,kBAAAQ,GACEjB,KAAKS,cAAgB,GACrBT,KAAKE,YAAYgB,iBAAiB,gBAAgBC,SAASC,IACzDA,EAASZ,QAAU,KAAK,IAE1BR,KAAKe,cAAcC,KAAKhB,KAAKS,c,CAI/B,wBAAAY,GACErB,KAAKC,KAAO,K,CAGd,MAAAqB,GACE,OACEC,EAACC,EAAI,KACHD,EAAA,qBACET,MAAOd,KAAKyB,kBAAiB,oBACVzB,KAAK0B,sBAAqB,0BACpB1B,KAAK2B,2BAC9BC,gBAAiB5B,KAAKS,cAAcoB,KAAKlB,GAASA,EAAKG,QACvDb,KAAMD,KAAKC,OAEbsB,EAAA,qBAAmBtB,KAAMD,KAAKC,KAAM6B,KAAK,SAAQ,aAAa9B,KAAK+B,aACjER,EAAA,4BAA0BS,qBAAsBhC,KAAKgC,sBACnDT,EAAA,MAAIU,KAAK,UAAUjC,KAAK+B,aACvB/B,KAAKS,cAAcyB,OAAS,EAC3BX,EAAA,aAAWU,KAAK,SAASE,KAAMC,EAAYC,GAAIC,QAASC,EAAeC,WACpExC,KAAKS,cAAcyB,QAEpB,MAENX,EAAA,8BACEA,EAAA,YACEU,KAAK,WACLK,QAASG,EAAcC,WACvBC,QAAS,KACP3C,KAAKE,YAAYgB,iBAAiB,gBAAgBC,SAASC,IACzDA,EAASZ,QAAU,KACnB,IAAKR,KAAKS,cAAcI,MAAMF,GAASA,EAAKC,QAAUQ,EAASR,QAAQ,CACrEZ,KAAKS,cAAgB,IAAIT,KAAKS,cAAe,CAAEK,MAAOM,EAASN,MAAOF,MAAOQ,EAASR,O,KAG1FZ,KAAKe,cAAcC,KAAKhB,KAAKS,cAAc,GAG5CT,KAAK4C,mBAERrB,EAAA,OACEsB,MAAM,8BACNC,MAAM,IACNC,OAAO,IACPd,KAAK,WACLe,QAAQ,UACRC,KAAK,OACLC,MAAM,8BAEN3B,EAAA,UAAQ4B,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIJ,KAAK,kBAEnC1B,EAAA,YAAUU,KAAK,WAAWK,QAASG,EAAcC,WAAYC,QAAS,IAAM3C,KAAKiB,sBAC9EjB,KAAKsD,eAER/B,EAAA,QAAMU,KAAK,WAEbV,EAAA,gCACEA,EAAA,gCAEEU,KAAK,SACLU,QAAS,KACP3C,KAAKuD,aAAavC,KAAKhB,KAAKS,eAC5BT,KAAKC,KAAO,KAAK,GAGlBD,KAAKwD,oB"}