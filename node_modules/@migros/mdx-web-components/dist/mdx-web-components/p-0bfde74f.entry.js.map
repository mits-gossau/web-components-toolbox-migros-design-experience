{"version":3,"names":["chipGroupCss","MdxChipGroupStyle0","ChipContainer","toggle","detail","selectedChip","selected","chipId","undefined","this","multiSelect","selectedChips","push","filter","chip","chipChange","emit","chips","forEach","every","Array","from","host","querySelectorAll","componentWillLoad","singleSelect","render","h","Host","key"],"sources":["src/components/chip-group/chip-group.scss?tag=mdx-chip-group&encapsulation=shadow","src/components/chip-group/chip-group.tsx"],"sourcesContent":[":host {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: var(--mdx-sys-spacing-fix-s);\n}\n","import { Component, Element, Event, EventEmitter, Host, Listen, Prop, State, h } from '@stencil/core';\n\n/**\n * @slot - For mdx-chip elements\n */\n\n@Component({\n  tag: 'mdx-chip-group',\n  styleUrl: 'chip-group.scss',\n  shadow: true,\n})\nexport class ChipContainer {\n  @Element()\n  host: HTMLMdxChipGroupElement;\n\n  @State()\n  selectedChips: { selected: boolean; chipId: string }[] = [];\n\n  @Prop()\n  multiSelect = false;\n\n  @Event()\n  chipChange: EventEmitter<typeof this.selectedChips>;\n\n  @Listen('toggle', { target: 'body' })\n  toggle({ detail }: CustomEvent<{ selected: boolean; chipId: string }>) {\n    const selectedChip = detail.selected ? { selected: detail.selected, chipId: detail.chipId } : undefined;\n    if (this.multiSelect) {\n      if (selectedChip !== undefined) {\n        this.selectedChips.push(selectedChip);\n      } else {\n        this.selectedChips = this.selectedChips.filter((chip) => chip.chipId !== detail.chipId);\n      }\n\n      this.chipChange.emit(this.selectedChips);\n    } else {\n      this.chips.forEach((chip) => {\n        if (detail.chipId !== chip.chipId && detail.selected) {\n          chip.selected = false;\n        }\n      });\n\n      if (selectedChip !== undefined) {\n        this.selectedChips = [selectedChip];\n        this.chipChange.emit(this.selectedChips);\n      } else if (this.chips.every((chip) => !chip.selected)) {\n        this.selectedChips = [];\n        this.chipChange.emit(this.selectedChips);\n      }\n    }\n  }\n\n  private get chips() {\n    return Array.from(this.host.querySelectorAll('mdx-chip'));\n  }\n\n  componentWillLoad() {\n    this.chips.forEach((chip) => {\n      if (!this.multiSelect) {\n        chip.singleSelect = true;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"gEAAA,MAAMA,EAAe,+GACrB,MAAAC,EAAeD,E,MCUFE,EAAa,M,mFAKiC,G,iBAG3C,K,CAMd,MAAAC,EAAOC,OAAEA,IACP,MAAMC,EAAeD,EAAOE,SAAW,CAAEA,SAAUF,EAAOE,SAAUC,OAAQH,EAAOG,QAAWC,UAC9F,GAAIC,KAAKC,YAAa,CACpB,GAAIL,IAAiBG,UAAW,CAC9BC,KAAKE,cAAcC,KAAKP,E,KACnB,CACLI,KAAKE,cAAgBF,KAAKE,cAAcE,QAAQC,GAASA,EAAKP,SAAWH,EAAOG,Q,CAGlFE,KAAKM,WAAWC,KAAKP,KAAKE,c,KACrB,CACLF,KAAKQ,MAAMC,SAASJ,IAClB,GAAIV,EAAOG,SAAWO,EAAKP,QAAUH,EAAOE,SAAU,CACpDQ,EAAKR,SAAW,K,KAIpB,GAAID,IAAiBG,UAAW,CAC9BC,KAAKE,cAAgB,CAACN,GACtBI,KAAKM,WAAWC,KAAKP,KAAKE,c,MACrB,GAAIF,KAAKQ,MAAME,OAAOL,IAAUA,EAAKR,WAAW,CACrDG,KAAKE,cAAgB,GACrBF,KAAKM,WAAWC,KAAKP,KAAKE,c,GAKhC,SAAYM,GACV,OAAOG,MAAMC,KAAKZ,KAAKa,KAAKC,iBAAiB,Y,CAG/C,iBAAAC,GACEf,KAAKQ,MAAMC,SAASJ,IAClB,IAAKL,KAAKC,YAAa,CACrBI,EAAKW,aAAe,I,KAK1B,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,QAAAE,IAAA,6C"}