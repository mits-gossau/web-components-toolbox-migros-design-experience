import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-399d9287.js';
import { B as BADGE_SIZES, a as BADGE_VARIANTS } from './exports-ac949071.js';
import { L as LINK_VARIANTS } from './exports-0b2cd507.js';

const filterCss = ":host{width:var(--mdx-comp-filter-flyout-sizing-width);display:block;position:relative}:host mdx-filter-flyout{position:absolute;width:var(--mdx-comp-filter-flyout-sizing-width);max-height:0;overflow:hidden;transition:var(--mdx-comp-flyout-transition-expand-collapse)}:host([open]) mdx-filter-flyout{max-height:100vh;box-shadow:var(--mdx-comp-flyout-box-shadow-default);transition:var(--mdx-comp-flyout-transition-expand-collapse)}";

const Filter = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.filterChanged = createEvent(this, "filterChanged", 7);
    this.filterSubmit = createEvent(this, "filterSubmit", 7);
    this.open = false;
    this.closeButtonAriaLabel = undefined;
    this.buttonSelectLabel = undefined;
    this.buttonSelectAriaLabel = undefined;
    this.clearButtonSelectAriaLabel = undefined;
    this.headerTitle = undefined;
    this.submitButtonText = undefined;
    this.selectAllLinkText = undefined;
    this.resetLinkText = undefined;
    this.selectedItems = [];
  }
  handleOutsideClick(event) {
    if (this.open && !this.hostElement.contains(event.target)) {
      this.open = false;
    }
  }
  selectButtonClickHandler() {
    this.open = !this.open;
  }
  toggleCheckboxHandler(event) {
    if (!event.detail.checked) {
      this.selectedItems = this.selectedItems.filter((item) => item.value !== event.detail.value);
    }
    else if (event.detail.checked && !this.selectedItems.find((item) => item.value === event.detail.value)) {
      this.selectedItems = [...this.selectedItems, { label: event.detail.label, value: event.detail.value }];
    }
    this.filterChanged.emit(this.selectedItems);
  }
  selectClearHandler() {
    this.selectedItems = [];
    this.hostElement.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
      checkbox.checked = false;
    });
    this.filterChanged.emit(this.selectedItems);
  }
  filterFlyoutCloseHandler() {
    this.open = false;
  }
  render() {
    return (h(Host, null, h("mdx-filter-select", { label: this.buttonSelectLabel, "button-aria-label": this.buttonSelectAriaLabel, "clear-button-aria-label": this.clearButtonSelectAriaLabel, selectedOptions: this.selectedItems.map((item) => item.label), open: this.open }), h("mdx-filter-flyout", { open: this.open, role: "dialog", "aria-label": this.headerTitle }, h("mdx-filter-flyout-header", { closeButtonAriaLabel: this.closeButtonAriaLabel }, h("h2", { slot: "header" }, this.headerTitle), this.selectedItems.length > 0 ? (h("mdx-badge", { slot: "header", size: BADGE_SIZES.MD, variant: BADGE_VARIANTS.SECONDARY }, this.selectedItems.length)) : null), h("mdx-filter-flyout-list", null, h("mdx-link", { slot: "controls", variant: LINK_VARIANTS.STANDALONE, onClick: () => {
        this.hostElement.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
          checkbox.checked = true;
          if (!this.selectedItems.find((item) => item.value === checkbox.value)) {
            this.selectedItems = [...this.selectedItems, { label: checkbox.label, value: checkbox.value }];
          }
        });
        this.filterChanged.emit(this.selectedItems);
      } }, this.selectAllLinkText), h("svg", { class: "filter-category__dot-spacer", width: "2", height: "2", slot: "controls", viewBox: "0 0 2 2", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("circle", { cx: "1", cy: "1", r: "1", fill: "currentColor" })), h("mdx-link", { slot: "controls", variant: LINK_VARIANTS.STANDALONE, onClick: () => this.selectClearHandler() }, this.resetLinkText), h("slot", { slot: "items" })), h("mdx-filter-flyout-footer", null, h("mdx-button", { "full-width": true, slot: "button", onClick: () => {
        this.filterSubmit.emit(this.selectedItems);
        this.open = false;
      } }, this.submitButtonText)))));
  }
  get hostElement() { return getElement(this); }
};
Filter.style = filterCss;

export { Filter as mdx_filter };

//# sourceMappingURL=mdx-filter.entry.js.map