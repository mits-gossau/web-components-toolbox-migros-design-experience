import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-7e8279cb.js';
import { p as parseAttribute } from './parse-attribute-fc9c1a5f.js';
import { B as BADGE_SIZES, a as BADGE_VARIANTS } from './exports-6e004c84.js';
import { b as BUTTON_TYPE } from './exports-a4c2b43e.js';
import { I as ICON_SIZES } from './exports-6dd4526a.js';
import { L as LINK_AS, a as LINK_VARIANTS } from './exports-3c8a42c6.js';

const filterCss = ":host{position:relative;display:block;width:var(--mdx-comp-filter-flyout-sizing-width)}:host .filter-search-icon{all:unset;color:var(--mdx-comp-filter-flyout-elements-header-icon-color-default);cursor:pointer}:host .filter-search-icon:focus-visible{border-radius:var(--mdx-comp-keyboard-focus-border-radius-default);outline-color:var(--mdx-comp-keyboard-focus-color-default);outline-style:solid;outline-width:var(--mdx-comp-keyboard-focus-border-width-default);outline-offset:2px}:host .filter-search-icon :hover{color:var(--mdx-comp-filter-flyout-elements-header-icon-color-hover)}:host mdx-filter-flyout{position:absolute;width:var(--mdx-comp-filter-flyout-sizing-width);max-height:0;overflow:hidden;transition:var(--mdx-comp-flyout-transition-expand-collapse)}:host([open]) mdx-filter-flyout{max-height:100vh;box-shadow:var(--mdx-comp-flyout-box-shadow-default);transition:var(--mdx-comp-flyout-transition-expand-collapse)}:host([open]) .filter-search-icon{color:var(--mdx-comp-filter-flyout-elements-header-icon-color-hover)}:host([is-filter-hidden]){display:none}";
const MdxFilterStyle0 = filterCss;

const Filter = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.filterChanged = createEvent(this, "filterChanged", 7);
        this.filterSubmit = createEvent(this, "filterSubmit", 7);
        this.open = false;
        this.isFilterHidden = false;
        this.closeButtonAriaLabel = undefined;
        this.buttonSelectLabel = undefined;
        this.clearButtonSelectAriaLabel = undefined;
        this.searchIconAriaLabel = undefined;
        this.headerTitle = undefined;
        this.submitButtonText = undefined;
        this.selectAllLinkText = undefined;
        this.resetLinkText = undefined;
        this.selectedItems = {};
        this.filterId = 'filter';
        this.searchOpen = false;
        this.searchValue = undefined;
    }
    selectedItemsChanged() {
        this.host.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
            var _a;
            checkbox.checked = ((_a = this.selectedItems[this.filterId]) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === checkbox.value)) !== undefined;
        });
    }
    handleOutsideClick(event) {
        if (this.open && !this.host.contains(event.target)) {
            this.open = false;
        }
    }
    selectButtonClickHandler() {
        this.open = !this.open;
    }
    toggleCheckboxHandler({ detail }) {
        var _a, _b, _c;
        {
            if (!detail.checked) {
                this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.filterId]: (_a = this.selectedItems[this.filterId]) === null || _a === void 0 ? void 0 : _a.filter((item) => item.value !== detail.value) });
            }
            else if (detail.checked && !((_b = this.selectedItems[this.filterId]) === null || _b === void 0 ? void 0 : _b.find((item) => item.value === detail.value))) {
                this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.filterId]: [...((_c = this.selectedItems[this.filterId]) !== null && _c !== void 0 ? _c : []), { label: detail.label, value: detail.value }] });
            }
        }
        this.filterChanged.emit(this.selectedItems);
    }
    selectClearHandler() {
        this.selectedItems = { [this.filterId]: [] };
        this.host.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
            checkbox.checked = false;
        });
        this.filterChanged.emit(this.selectedItems);
    }
    filterFlyoutCloseHandler() {
        this.open = false;
    }
    handleSearchInput(event) {
        const inputValue = event.currentTarget.value;
        this.host.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
            if (checkbox.label.toLowerCase().includes(inputValue.toLowerCase())) {
                checkbox.style.display = 'block';
            }
            else {
                checkbox.style.display = 'none';
            }
        });
    }
    getSelectedFiltersCount(filterId) {
        var _a, _b;
        return filterId !== undefined
            ? (_b = (_a = this.selectedItems[filterId]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0
            : Object.values(this.selectedItems).reduce((acc, curr) => acc + curr.length, 0);
    }
    componentWillLoad() {
        this.selectedItemsChanged();
    }
    connectedCallback() {
        this.selectedItems = parseAttribute(this.host, 'selected-items', this.selectedItems);
    }
    render() {
        return !this.isFilterHidden ? (h(Host, null, h("mdx-filter-select", { label: this.buttonSelectLabel, "clear-button-aria-label": this.clearButtonSelectAriaLabel, selectedItems: Object.values(this.selectedItems)
                .flat()
                .map((item) => item.label), open: this.open }), h("mdx-filter-flyout", { open: this.open, role: "dialog", "aria-label": this.headerTitle }, h("mdx-filter-flyout-header", { closeButtonAriaLabel: this.closeButtonAriaLabel }, h("h2", { slot: "header" }, this.headerTitle), this.getSelectedFiltersCount(this.filterId) > 0 ? (h("mdx-badge", { slot: "header", size: BADGE_SIZES.MD, variant: BADGE_VARIANTS.SECONDARY }, this.selectedItems[this.filterId].length)) : null), h("mdx-filter-flyout-list", null, h("mdx-link", { slot: "controls", as: LINK_AS.BUTTON, type: BUTTON_TYPE.BUTTON, variant: LINK_VARIANTS.STANDALONE, onClick: () => {
                this.host.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
                    var _a, _b, _c;
                    checkbox.checked = true;
                    if (this.filterId === undefined) {
                        return;
                    }
                    if (!((_a = this.selectedItems[this.filterId]) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === checkbox.value))) {
                        this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.filterId]: [
                                ...((_b = this.selectedItems[this.filterId]) !== null && _b !== void 0 ? _b : []),
                                { label: checkbox.label, value: (_c = checkbox.value) !== null && _c !== void 0 ? _c : '' },
                            ] });
                    }
                });
                this.filterChanged.emit(this.selectedItems);
            } }, this.selectAllLinkText), h("svg", { width: "2", height: "2", slot: "controls", viewBox: "0 0 2 2", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("circle", { cx: "1", cy: "1", r: "1", fill: "currentColor" })), h("mdx-link", { slot: "controls", as: LINK_AS.BUTTON, type: BUTTON_TYPE.BUTTON, variant: LINK_VARIANTS.STANDALONE, onClick: () => this.selectClearHandler() }, this.resetLinkText), h("button", { slot: "search-icon", class: "filter-search-icon", onClick: () => (this.searchOpen = !this.searchOpen), "aria-label": this.searchIconAriaLabel }, h("mdx-icon-search", { slot: "search-icon", size: ICON_SIZES.XS })), this.searchOpen ? (h("mdx-input", { slot: "search", label: "", placeholder: "Suchen...", onInput: (event) => this.handleSearchInput(event), value: this.searchValue })) : null, h("slot", { slot: "items" })), h("mdx-filter-flyout-footer", null, h("mdx-button", { "full-width": true, slot: "button", type: BUTTON_TYPE.SUBMIT, onClick: () => {
                this.filterSubmit.emit(this.selectedItems);
                this.open = false;
            } }, this.submitButtonText))))) : null;
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "selectedItems": ["selectedItemsChanged"]
    }; }
};
Filter.style = MdxFilterStyle0;

export { Filter as mdx_filter };

//# sourceMappingURL=mdx-filter.entry.js.map