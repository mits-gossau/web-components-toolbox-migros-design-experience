import { r as registerInstance, h, H as Host, g as getElement } from './index-399d9287.js';
import { B as BUTTON_VARIANTS, a as BUTTON_SIZES, b as BUTTON_TYPE } from './exports-1631f205.js';
import { I as ICON_SIZES } from './exports-f063c20a.js';
import { I as INPUT_TYPES } from './export-fdd0b3d6.js';
import { T as TILE_VARIANTS } from './export-8b843755.js';

var TABLE_BODY_VARIANTS;
(function (TABLE_BODY_VARIANTS) {
  TABLE_BODY_VARIANTS["DATE"] = "date";
  TABLE_BODY_VARIANTS["MONTH"] = "month";
  TABLE_BODY_VARIANTS["YEAR"] = "year";
  TABLE_BODY_VARIANTS["WEEKDAY"] = "weekday";
})(TABLE_BODY_VARIANTS || (TABLE_BODY_VARIANTS = {}));

const datePickerCss = ":host{position:relative}:host .date-picker{position:absolute;width:var(--mdx-comp-date-picker-container-sizing-width);height:var(--mdx-comp-date-picker-container-sizing-height);box-shadow:var(--mdx-comp-date-picker-container-shadow-default);border-radius:var(--mdx-comp-date-picker-container-border-radius-default);top:100%;animation:visible var(--mdx-comp-date-picker-transition-fade-in-out-duration) var(--mdx-comp-date-picker-transition-fade-in-out-timing-function) var(--mdx-comp-date-picker-transition-fade-in-out-delay);z-index:10}:host .date-picker__header-button:focus-visible{border-radius:var(--mdx-comp-keyboard-focus-border-radius-default);outline-color:var(--mdx-comp-keyboard-focus-color-default);outline-style:solid;outline-width:var(--mdx-comp-keyboard-focus-border-width-default);outline-offset:2px}:host .date-picker__header-arrow-icon{color:var(--mdx-comp-date-picker-header-icon-color-default)}:host .date-picker__table-heading{display:flex;flex-wrap:wrap;align-content:center;justify-content:center}:host .date-picker__table{padding:var(--mdx-comp-date-picker-container-padding-top-bottom) var(--mdx-comp-date-picker-container-padding-left-right)}:host .date-picker__table-body{display:flex;flex-wrap:wrap;align-content:center}:host .date-picker__table-body-month{display:flex;justify-content:center;flex-wrap:wrap;row-gap:var(--mdx-comp-date-picker-tile-list-spacing-gap-month-vertical)}:host .date-picker__table-body-year{display:flex;justify-content:center;flex-wrap:wrap;row-gap:var(--mdx-comp-date-picker-tile-list-spacing-gap-year-horizontal)}:host .date-picker__table-row-dates{display:flex;justify-content:center;align-items:center;padding:0}:host .date-picker__table-row-month{display:flex;justify-content:center;column-gap:var(--mdx-comp-date-picker-tile-list-spacing-gap-month-horizontal)}:host .date-picker__table-row-year{display:flex;justify-content:center;column-gap:var(--mdx-comp-date-picker-tile-list-spacing-gap-year-horizontal)}:host .date-picker__header-title{pointer-events:none}:host .date-picker__input-icon-button{all:unset;cursor:pointer;color:var(--mdx-comp-inputfield-icon-color-default)}:host .date-picker__input-icon-button:focus-visible{border-radius:var(--mdx-comp-keyboard-focus-border-radius-default);outline-color:var(--mdx-comp-keyboard-focus-color-default);outline-style:solid;outline-width:var(--mdx-comp-keyboard-focus-border-width-default);outline-offset:2px}@media screen and (max-width: 768px){:host .date-picker{display:none}:host .date-picker__input-icon-button{display:none}}@keyframes visible{from{opacity:0}to{opacity:1}}";

const languages = {
  en: 'en-EN',
  de: 'de-DE',
  fr: 'fr-FR',
  it: 'it-IT',
};
const weekdaysByLanguage = {
  en: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su'],
  de: ['mo', 'di', 'mi', 'do', 'fr', 'sa', 'so'],
  fr: ['lu', 'ma', 'me', 'je', 've', 'sa', 'di'],
  it: ['lu', 'ma', 'me', 'gi', 've', 'sa', 'do'],
};
const DatePicker = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.arrowUpAriaLabel = undefined;
    this.arrowDownAriaLabel = undefined;
    this.cancelButtonAriaLabel = undefined;
    this.cancelButtonLabel = undefined;
    this.submitButtonAriaLabel = undefined;
    this.submitButtonLabel = undefined;
    this.selectedMode = 'date';
    this.monthModeTitle = undefined;
    this.yearModeTitle = undefined;
    this.returnButtonLabel = undefined;
    this.returnButtonAriaLabel = undefined;
    this.monthHeaderAriaLabel = undefined;
    this.yearHeaderAriaLabel = undefined;
    this.calendarIconAriaLabel = undefined;
    this.inputLabel = undefined;
    this.selectedMonthView = new Date().getMonth();
    this.language = 'de';
    this.selectedYearView = new Date().getFullYear();
    this.value = new Date();
    this.open = false;
    this.variant = TABLE_BODY_VARIANTS.DATE;
    this.years = [];
  }
  selectTileHandler(event) {
    if (this.selectedMode === 'month') {
      this.selectedMonthView = event.detail.tileValue;
      this.value.setMonth(this.selectedMonthView);
      this.selectedMode = 'date';
    }
    else if (this.selectedMode === 'year') {
      this.selectedYearView = event.detail.tileValue;
      this.value.setFullYear(this.selectedYearView);
      this.selectedMode = 'date';
    }
    else {
      this.value = new Date();
      this.value.setDate(event.detail.tileValue);
      this.value.setMonth(this.selectedMonthView);
      this.value.setFullYear(this.selectedYearView);
    }
  }
  arrowClickHandler(event) {
    if (event.detail === 'up' && this.selectedMode === 'date') {
      if (this.selectedMonthView === 0) {
        this.selectedMonthView = 11;
        this.selectedYearView--;
      }
      else
        this.selectedMonthView--;
    }
    else if (event.detail === 'down' && this.selectedMode === 'date') {
      if (this.selectedMonthView === 11) {
        this.selectedMonthView = 0;
        this.selectedYearView++;
      }
      else
        this.selectedMonthView++;
    }
    else if (event.detail === 'up' && this.selectedMode === 'month') {
      this.selectedYearView--;
    }
    else if (event.detail === 'down' && this.selectedMode === 'month') {
      this.selectedYearView++;
    }
    else if (event.detail === 'up' && this.selectedMode === 'year') {
      this.selectedYearView -= 16;
      this.updateYears();
    }
    else if (event.detail === 'down' && this.selectedMode === 'year') {
      this.selectedYearView += 16;
      this.updateYears();
    }
  }
  inputChangeHandler(event) {
    const date = new Date(event.detail.input);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    if (year >= 1000 && year <= 2200 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
      this.selectedYearView = year;
      this.value = date;
      this.selectedMonthView = month - 1;
    }
    else {
      return;
    }
  }
  handleKeyDown(event) {
    var _a, _b;
    if (event.key === ' ' && ((_b = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'MDX-INPUT') {
      event.preventDefault();
      this.open = true;
    }
    else if (event.key === 'Escape') {
      this.open = false;
    }
  }
  generateMonthDays(month, year) {
    const days = [];
    const date = new Date(year, month, 1);
    while (date.getMonth() === month) {
      const day = date.getDate();
      const shortWeekday = date
        .toLocaleString(languages[this.language], { weekday: 'short' })
        .substring(0, 2)
        .toLocaleLowerCase();
      const fullWeekday = date.toLocaleString(languages[this.language], { weekday: 'long' });
      days.push({ date: day, shortWeekday, fullWeekday });
      date.setDate(day + 1);
    }
    return days;
  }
  generateMonthsAndYears(year) {
    const months = [];
    const date = new Date(year, 0, 1);
    while (date.getFullYear() === year) {
      const monthWithoutTime = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      const shortMonthName = monthWithoutTime.toLocaleString(this.language, { month: 'short' });
      const fullMonthName = monthWithoutTime.toLocaleString(this.language, { month: 'long' });
      months.push({
        shortMonthName,
        year: date.getFullYear(),
        monthNumber: date.getMonth(),
        fullMonthName,
      });
      date.setMonth(date.getMonth() + 1);
    }
    return months;
  }
  generateYears(year, numberOfYears) {
    const date = new Date(year, 0, 1);
    const years = [];
    for (let i = 0; i < numberOfYears; i++) {
      years.push(date.getFullYear());
      date.setFullYear(date.getFullYear() + 1);
    }
    return years;
  }
  formatDateForInput(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${year}-${month}-${day}`;
  }
  componentDidRender() {
    var _a, _b, _c;
    if (this.selectedMode === 'year' || this.selectedMode === 'month') {
      const element = (_c = (_b = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('mdx-date-picker-header')) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('button');
      if (element) {
        element.tabIndex = 0;
        element.focus();
      }
    }
  }
  componentWillLoad() {
    this.updateYears();
  }
  updateYears() {
    this.years = this.generateYears(this.selectedYearView, 16);
  }
  chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
      chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
  }
  getDates() {
    const dates = this.generateMonthDays(this.selectedMonthView, this.selectedYearView);
    const empty = dates.length > 0
      ? [...Array(weekdaysByLanguage[this.language].indexOf(dates[0].shortWeekday)).keys()].map(() => null)
      : [];
    const chunkedDates = this.chunkArray([...empty, ...dates], 7);
    const dateRows = chunkedDates.map((chunk) => (h("tr", { key: chunk.join('-'), class: "date-picker__table-row-dates" }, chunk.map((date) => {
      if (date === null) {
        return h("mdx-date-picker-tile", { variant: TILE_VARIANTS.EMPTY, slot: "tile" });
      }
      else {
        return (h("mdx-date-picker-tile", { key: date.shortWeekday, variant: TILE_VARIANTS.DATE, slot: "tile", content: date.date.toString(), tileValue: date.date, today: date.date === new Date().getDate() &&
            this.selectedMonthView === new Date().getMonth() &&
            this.selectedYearView === new Date().getFullYear(), selected: date.date === this.value.getDate() &&
            this.selectedMonthView === this.value.getMonth() &&
            this.selectedYearView === this.value.getFullYear(), tileAriaLabel: `${date.date.toString()} ${date.fullWeekday}` }));
      }
    }))));
    return dateRows;
  }
  getMonths() {
    const monthRows = this.chunkArray(this.generateMonthsAndYears(this.selectedYearView), 3).map((chunk) => (h("tr", { key: chunk.join('-'), class: "date-picker__table-row-month" }, chunk.map((month) => (h("mdx-date-picker-tile", { key: month.shortMonthName, variant: TILE_VARIANTS.MONTH, slot: "tile", content: month.shortMonthName, subContent: month.year.toString(), tileValue: month.monthNumber, today: month.monthNumber === new Date().getMonth() && month.year === new Date().getFullYear(), selected: month.monthNumber === this.value.getMonth() && month.year === this.value.getFullYear(), tileAriaLabel: month.fullMonthName + ' ' + month.year }))))));
    return monthRows;
  }
  getYears() {
    const yearsRows = this.chunkArray(this.years, 4).map((chunk) => (h("tr", { key: chunk.join('-'), class: "date-picker__table-row-year" }, chunk.map((year) => (h("mdx-date-picker-tile", { key: year, variant: TILE_VARIANTS.YEAR, slot: "tile", content: year.toString(), tileValue: year, today: year === new Date().getFullYear(), selected: year === this.value.getFullYear(), tileAriaLabel: year.toString() }))))));
    return yearsRows;
  }
  render() {
    return (h(Host, null, h("mdx-input", { label: this.inputLabel, type: INPUT_TYPES.DATE, value: this.formatDateForInput(this.value), "aria-describedby": "dd-mm-yyyy" }, h("button", { onClick: () => (this.open = !this.open), slot: "icon", class: "date-picker__input-icon-button", "aria-label": this.calendarIconAriaLabel }, h("mdx-icon-calendar", { slot: "icon", size: ICON_SIZES.SM }))), this.open && (h("div", { class: "date-picker" }, this.selectedMode === 'date' ? (h("mdx-date-picker-header", { arrowDownAriaLabel: this.arrowDownAriaLabel, arrowUpAriaLabel: this.arrowUpAriaLabel }, h("button", { slot: "title", onClick: () => (this.selectedMode = 'month'), "aria-label": this.monthHeaderAriaLabel, class: "date-picker__header-button" }, new Date(this.selectedYearView, this.selectedMonthView, 1).toLocaleString(this.language, {
      month: 'long',
    }), h("mdx-icon-chevron-down", { size: ICON_SIZES.XS, class: "date-picker__header-arrow-icon" })), h("button", { slot: "title", onClick: () => {
        this.selectedMode = 'year';
      }, "aria-label": this.yearHeaderAriaLabel, class: "date-picker__header-button" }, this.selectedYearView, h("mdx-icon-chevron-down", { size: ICON_SIZES.XS, class: "date-picker__header-arrow-icon" })))) : (h("mdx-date-picker-header", null, h("span", { slot: "title", class: "date-picker__header-title" }, this.selectedMode === 'month' ? this.monthModeTitle : this.yearModeTitle))), this.selectedMode === 'date' ? (h("table", { class: "date-picker__table" }, h("thead", { class: "date-picker__table-heading" }, weekdaysByLanguage[this.language].map((weekday) => (h("mdx-date-picker-tile", { variant: TILE_VARIANTS.WEEKDAY, slot: "tile", content: weekday, tileAriaLabel: weekday })))), h("tbody", { class: "date-picker__table-body" }, this.getDates()))) : this.selectedMode === 'month' ? (h("table", { class: "date-picker__table" }, h("tbody", { class: "date-picker__table-body-month" }, this.getMonths()))) : (h("table", { class: "date-picker__table" }, h("tbody", { class: "date-picker__table-body-year" }, this.getYears()))), this.selectedMode === 'date' ? (h("mdx-date-picker-footer", null, h("mdx-button-group", { slot: "footer" }, h("mdx-button", { variant: BUTTON_VARIANTS.PRIMARY, size: BUTTON_SIZES.SM, ariaLabel: this.submitButtonAriaLabel, onClick: () => (this.open = false), type: BUTTON_TYPE.BUTTON }, this.submitButtonLabel), h("mdx-button", { variant: BUTTON_VARIANTS.TERTIARY, size: BUTTON_SIZES.SM, ariaLabel: this.cancelButtonAriaLabel }, this.cancelButtonLabel)))) : (h("mdx-date-picker-footer", null, h("mdx-button", { slot: "footer", variant: BUTTON_VARIANTS.TERTIARY, size: BUTTON_SIZES.SM, onClick: () => (this.selectedMode = 'date'), "aria-label": this.returnButtonAriaLabel }, h("mdx-icon-arrow-left", { size: ICON_SIZES.SM }), h("span", null, this.returnButtonLabel))))))));
  }
  get host() { return getElement(this); }
};
DatePicker.style = datePickerCss;

export { DatePicker as mdx_date_picker };

//# sourceMappingURL=mdx-date-picker.entry.js.map