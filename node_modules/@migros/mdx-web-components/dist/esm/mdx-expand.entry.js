import { r as registerInstance, h, g as getElement } from './index-399d9287.js';
import { I as ICON_SIZES } from './exports-f063c20a.js';

const expandCss = ":host .expand{box-sizing:border-box}:host .expand__content{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden;font:var(--mdx-comp-expand-font-default);font-family:var(--mdx-comp-expand-font-default-font-family);font-weight:var(--mdx-comp-expand-font-weight-text);line-height:var(--mdx-comp-expand-font-default-line-height);font-size:var(--mdx-comp-expand-font-default-font-size);letter-spacing:var(--mdx-comp-expand-font-default-letter-spacing);text-decoration:var(--mdx-comp-expand-font-default-text-decoration);color:var(--mdx-comp-expand-text-color-default);word-break:break-all;line-clamp:var(--expand-line-clamp);-webkit-line-clamp:var(--expand-line-clamp);max-height:calc(var(--mdx-comp-expand-font-default-line-height) * var(--expand-line-clamp))}:host .expand__content ::slotted(*){margin:0}:host .expand--is-expanded .expand__content{animation-name:expand;animation-delay:var(--mdx-comp-expand-transition-expand-collapse-delay);animation-duration:var(--mdx-comp-expand-transition-expand-collapse-duration);animation-iteration-count:1;animation-timing-function:var(--mdx-comp-expand-transition-expand-collapse-timing-function);animation-fill-mode:forwards;line-clamp:unset;-webkit-line-clamp:unset}:host .expand--is-expanded .expand__icon{transform:rotate(180deg);transition-duration:var(--mdx-comp-expand-transition-icon-chevron-duration);transition-delay:var(--mdx-comp-expand-transition-icon-chevron-delay);transition-timing-function:var(--mdx-comp-expand-transition-icon-chevron-timing-function)}:host .expand__button{background-color:transparent;border:none;cursor:pointer;padding:0;margin-top:var(--mdx-comp-expand-gap-text-label-default);display:flex;align-items:center;gap:var(--mdx-comp-expand-gap-icon-text-default);font-family:var(--mdx-comp-expand-font-label-font-family);font-weight:var(--mdx-comp-expand-font-weight-label);line-height:var(--mdx-comp-expand-font-label-line-height);font-size:var(--mdx-comp-expand-font-label-font-size);letter-spacing:var(--mdx-comp-expand-font-label-letter-spacing);text-decoration:var(--mdx-comp-expand-font-label-text-decoration);color:var(--mdx-comp-expand-label-color-default)}:host .expand__button:hover{color:var(--mdx-comp-expand-label-color-hover)}:host .expand__icon{transition-property:transform;transition-duration:var(--mdx-comp-expand-transition-icon-chevron-duration);transition-delay:var(--mdx-comp-expand-transition-icon-chevron-delay);transition-timing-function:var(--mdx-comp-expand-transition-icon-chevron-timing-function)}@keyframes expand{0%{max-height:calc(var(--mdx-comp-expand-font-default-line-height) * var(--expand-line-clamp))}100%{max-height:100vh}}";

const Expand = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.expanded = false;
    this.labelOpen = undefined;
    this.labelClosed = undefined;
    this.lineClamp = undefined;
  }
  componentWillRender() {
    document.documentElement.style.setProperty('--expand-line-clamp', this.lineClamp > 1 ? this.lineClamp.toString() : '');
  }
  render() {
    return (h("div", { class: `expand${this.expanded ? ' expand--is-expanded' : ''}` }, h("div", { class: "expand__content" }, h("slot", null)), h("button", { class: "expand__button", onClick: () => (this.expanded = !this.expanded) }, this.expanded ? this.labelOpen : this.labelClosed, h("mdx-icon-chevron-down", { class: "expand__icon", size: ICON_SIZES.XS }))));
  }
  get host() { return getElement(this); }
};
Expand.style = expandCss;

export { Expand as mdx_expand };

//# sourceMappingURL=mdx-expand.entry.js.map