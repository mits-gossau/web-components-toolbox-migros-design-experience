{"file":"mdx-accordion-group.entry.js","mappings":";;AAAA,MAAM,iBAAiB,GAAG,gIAAgI;;ACE1J,MAAM,6BAA6B,GAAG,CAAC,OAAyC;EAC9E,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;IACnE,OAAO,IAAI,CAAC;GACb;EACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;MAOW,kBAAkB;;;;;;EAW7B,iBAAiB;IACf,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAElD,IAAI,IAAI,CAAC,iBAAiB,EAAE;MAC1B,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;MAC9D,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS;QAChC,IAAI,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,MAAK,SAAS,CAAC,IAAI,EAAE;UAC5C,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;SACxB;OACF,CAAC,CAAC;KACJ;GACF;EAED,IAAY,UAAU;IACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC;GAChE;EAEO,QAAQ,CAAC,SAA2C;IAC1D,OAAO,6BAA6B,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;GACjH;EAEO,MAAM,CAAC,IAAwB;IACrC,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;MACnC,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC9B,OAAO,IAAI,CAAC;GACb;EAED,MAAM;IACJ,QACE,EAAC,IAAI,IACH,gBAAgB,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;QAC3C,IAAI,IAAI,EAAE;UACR,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACnB;OACF,IAED,YAAM,IAAI,EAAC,YAAY,GAAQ,CAC1B,EACP;GACH;;;;;;;;;;","names":[],"sources":["src/components/accordion-group/accordion-group.scss?tag=mdx-accordion-group&encapsulation=shadow","src/components/accordion-group/accordion-group.tsx"],"sourcesContent":[":host {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: var(--mdx-comp-accordion-gap-accordion-elements);\n  padding: 0;\n}\n","import { Component, Element, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\n\nconst isHTMLMdxAccordionItemElement = (element: string | HTMLMdxAccordionElement): element is HTMLMdxAccordionElement => {\n  if (typeof element === 'object' && typeof element.item === 'string') {\n    return true;\n  }\n  return false;\n};\n\n@Component({\n  tag: 'mdx-accordion-group',\n  styleUrl: 'accordion-group.scss',\n  shadow: true,\n})\nexport class AccordionContainer {\n  @Element()\n  host: HTMLMdxAccordionGroupElement;\n\n  @Prop({ reflect: true })\n  selectedAccordion: HTMLMdxAccordionElement['item'];\n\n  @Event()\n  accordionChange: EventEmitter<HTMLMdxAccordionElement['item']>;\n\n  @Watch('selectedAccordion')\n  onAccordionChange() {\n    this.accordionChange.emit(this.selectedAccordion);\n\n    if (this.selectedAccordion) {\n      const activeAccordion = this.getItems(this.selectedAccordion);\n      this.accordions.forEach((accordion) => {\n        if (activeAccordion?.item !== accordion.item) {\n          accordion.open = false;\n        }\n      });\n    }\n  }\n\n  private get accordions() {\n    return Array.from(this.host.querySelectorAll('mdx-accordion'));\n  }\n\n  private getItems(accordion: string | HTMLMdxAccordionElement): HTMLMdxAccordionElement | undefined {\n    return isHTMLMdxAccordionItemElement(accordion) ? accordion : this.accordions.find((t) => t.item === accordion);\n  }\n\n  private select(item: string | undefined) {\n    if (this.selectedAccordion === item) {\n      return false;\n    }\n    this.selectedAccordion = item;\n    return true;\n  }\n\n  render() {\n    return (\n      <Host\n        onAccordionClick={({ detail: { item, open } }) => {\n          if (open) {\n            this.select(item);\n          }\n        }}\n      >\n        <slot name=\"accordions\"></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}