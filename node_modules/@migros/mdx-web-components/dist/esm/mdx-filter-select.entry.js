import { r as registerInstance, h, g as getElement } from './index-399d9287.js';
import { d as debounce } from './defer-90edfec0.js';

const CHAR_SIZE = 8;
const FilterSelect = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.recalculateButtonLabel = debounce(this.recalculateButtonLabelFn.bind(this), 100);
    this.displayedLabel = undefined;
    this.badge = undefined;
    this.label = undefined;
    this.selectedOptions = undefined;
    this.clearButtonAriaLabel = undefined;
    this.buttonAriaLabel = undefined;
    this.open = undefined;
  }
  handleClick() {
    this.selectedOptions = [];
  }
  onWindowResize() {
    this.recalculateButtonLabel();
  }
  componentDidRender() {
    this.recalculateButtonLabelFn();
  }
  recalculateButtonLabelFn() {
    var _a, _b, _c;
    if (this.selectedOptions && this.selectedOptions.length === 0) {
      this.displayedLabel = this.label;
      this.badge = '';
      return;
    }
    const buttonLabel = (_c = (_b = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('mdx-filter-select-button')) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('.filter-select-button__button-label');
    let width = buttonLabel ? buttonLabel.clientWidth - 20 : 100;
    const displayedLabels = [];
    while (width > 0) {
      if (this.selectedOptions[displayedLabels.length] &&
        (this.selectedOptions[displayedLabels.length].length + 2) * CHAR_SIZE < width) {
        width -= (this.selectedOptions[displayedLabels.length].length + 2) * CHAR_SIZE;
        displayedLabels.push(this.selectedOptions[displayedLabels.length]);
      }
      else {
        break;
      }
    }
    this.displayedLabel = displayedLabels.join(', ') + (displayedLabels.length < this.selectedOptions.length ? ', ...' : '');
    this.badge =
      displayedLabels.length < this.selectedOptions.length
        ? '+' + (this.selectedOptions.length - displayedLabels.length).toString()
        : '';
  }
  render() {
    return this.selectedOptions.length > 0 ? (h("mdx-filter-select-button", { badge: this.badge, label: this.displayedLabel, buttonAriaLabel: this.buttonAriaLabel, clearButtonAriaLabel: this.clearButtonAriaLabel })) : (h("mdx-select-button", { open: this.open, text: this.label }));
  }
  get host() { return getElement(this); }
};

export { FilterSelect as mdx_filter_select };

//# sourceMappingURL=mdx-filter-select.entry.js.map