import { r as registerInstance, h, g as getElement } from './index-7e8279cb.js';
import { d as debounce } from './defer-9d2947ae.js';
import { p as parseAttribute } from './parse-attribute-fc9c1a5f.js';

const CHAR_SIZE = 8;
const FilterSelect = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.recalculateButtonLabel = debounce(this.recalculateButtonLabelFn.bind(this), 100);
        this.displayedLabel = undefined;
        this.badge = undefined;
        this.label = undefined;
        this.selectedItems = undefined;
        this.clearButtonAriaLabel = undefined;
        this.open = undefined;
    }
    handleClick() {
        this.selectedItems = [];
    }
    onWindowResize() {
        this.recalculateButtonLabel();
    }
    componentDidRender() {
        this.recalculateButtonLabelFn();
    }
    recalculateButtonLabelFn() {
        var _a, _b, _c;
        if (this.selectedItems && this.selectedItems.length === 0) {
            this.displayedLabel = this.label;
            this.badge = '';
            return;
        }
        const buttonLabel = (_c = (_b = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('mdx-filter-select-button')) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('.filter-select-button__button-label');
        let width = buttonLabel ? buttonLabel.clientWidth - 20 : 100;
        const displayedLabels = [];
        while (width > 0) {
            const currentItem = this.selectedItems[displayedLabels.length];
            if (typeof currentItem === 'string' && (currentItem.length + 2) * CHAR_SIZE < width) {
                width -= (currentItem.length + 2) * CHAR_SIZE;
                displayedLabels.push(currentItem);
            }
            else {
                break;
            }
        }
        this.displayedLabel = displayedLabels.join(', ') + (displayedLabels.length < this.selectedItems.length ? ', ...' : '');
        this.badge =
            displayedLabels.length < this.selectedItems.length
                ? '+' + (this.selectedItems.length - displayedLabels.length).toString()
                : '';
    }
    connectedCallback() {
        this.selectedItems = parseAttribute(this.host, 'selected-items', this.selectedItems);
    }
    render() {
        return this.selectedItems.length > 0 ? (h("mdx-filter-select-button", { badge: this.badge, label: this.displayedLabel, clearButtonAriaLabel: this.clearButtonAriaLabel })) : (h("mdx-select-button", { open: this.open, text: this.label }));
    }
    get host() { return getElement(this); }
};

export { FilterSelect as mdx_filter_select };

//# sourceMappingURL=mdx-filter-select.entry.js.map