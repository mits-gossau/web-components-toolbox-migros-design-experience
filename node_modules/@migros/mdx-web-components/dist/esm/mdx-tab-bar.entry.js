import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-399d9287.js';
import { I as ICON_SIZES } from './exports-f063c20a.js';

const tabBarCss = ":host .tab-bar{box-sizing:border-box;position:relative}:host .tab-bar__tabs{display:flex;flex-direction:row;width:100%;overflow-x:hidden;border-bottom-style:solid;background-color:var(--mdx-comp-tabs-background-color-default);border-bottom-width:var(--mdx-comp-tabs-border-width-bottom-default);border-top-width:var(--mdx-comp-tabs-border-width-top-default);border-left-width:var(--mdx-comp-tabs-border-width-left-default);border-right-width:var(--mdx-comp-tabs-border-width-right-default);border-color:var(--mdx-comp-tabs-border-color-default)}:host .tab-bar__chevron{z-index:20;position:absolute;height:100%;cursor:pointer;visibility:hidden;color:var(--mdx-comp-tabs-scroll-element-icon-color-default)}:host .tab-bar__chevron:hover{color:var(--mdx-comp-tabs-scroll-element-icon-color-hover)}:host .tab-bar__chevron__left{left:0;padding-left:var(--mdx-comp-tabs-padding-scroll-element-left-left-desktop);padding-right:var(--mdx-comp-tabs-padding-scroll-element-left-right-desktop);background-image:linear-gradient(to left, rgba(255, 255, 255, 0) 0%, var(--mdx-comp-tabs-background-color-default) var(--mdx-comp-tabs-sizing-scroll-element-gradient-desktop), var(--mdx-comp-tabs-background-color-default) 100%)}@media only screen and (max-width: 768px){:host .tab-bar__chevron__left{padding-left:var(--mdx-comp-tabs-padding-scroll-element-left-left-mobile);padding-right:var(--mdx-comp-tabs-padding-scroll-element-left-right-mobile);background-image:linear-gradient(to left, rgba(255, 255, 255, 0) 0%, var(--mdx-comp-tabs-background-color-default) var(--mdx-comp-tabs-sizing-scroll-element-gradient-mobile), var(--mdx-comp-tabs-background-color-default) 100%)}}:host .tab-bar__chevron__right{right:0;top:0;padding-left:var(--mdx-comp-tabs-padding-scroll-element-right-left-desktop);padding-right:var(--mdx-comp-tabs-padding-scroll-element-right-right-desktop);background-image:linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgb(255, 255, 255) var(--mdx-comp-tabs-sizing-scroll-element-gradient-desktop), rgb(255, 255, 255) 100%)}@media only screen and (max-width: 768px){:host .tab-bar__chevron__right{padding-left:var(--mdx-comp-tabs-padding-scroll-element-left-left-mobile);padding-right:var(--mdx-comp-tabs-padding-scroll-element-left-right-mobile);background-image:linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgb(255, 255, 255) var(--mdx-comp-tabs-sizing-scroll-element-gradient-mobile), rgb(255, 255, 255) 100%)}}:host([fill-width]) ::slotted(*){flex-grow:1;overflow-x:hidden;width:100%}:host([fill-width]) .tab-bar__tabs{justify-content:space-evenly}";

const SCROLL_AMOUNT = 200;
const isHTMLMdxTabElementElement = (element) => {
  if (typeof element === 'object' && typeof element.tab === 'string') {
    return true;
  }
  return false;
};
const TabBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.selectedTabChanged = createEvent(this, "selectedTabChanged", 7);
    this.toggleChevronVisibility = () => {
      var _a, _b, _c, _d;
      const ul = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tab-bar__tabs');
      const chevronLeft = (_b = this.host.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.tab-bar__chevron__left');
      const chevronRight = (_c = this.host.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('.tab-bar__chevron__right');
      const currentScroll = Math.ceil((((_d = ul === null || ul === void 0 ? void 0 : ul.getBoundingClientRect()) === null || _d === void 0 ? void 0 : _d.width) || 0) + ((ul === null || ul === void 0 ? void 0 : ul.scrollLeft) || 0));
      if (!ul || !chevronLeft || !chevronRight) {
        return;
      }
      if ((ul === null || ul === void 0 ? void 0 : ul.scrollLeft) > 0) {
        chevronLeft.style.visibility = 'visible';
      }
      else {
        chevronLeft.style.visibility = 'hidden';
      }
      if (currentScroll < ul.scrollWidth) {
        chevronRight.style.visibility = 'visible';
      }
      else {
        chevronRight.style.visibility = 'hidden';
      }
    };
    this.onClickChevronRight = () => {
      var _a;
      const ul = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tab-bar__tabs');
      ul === null || ul === void 0 ? void 0 : ul.scroll({
        left: ul.scrollLeft + SCROLL_AMOUNT,
        behavior: 'smooth',
      });
      setTimeout(() => this.toggleChevronVisibility(), 300);
    };
    this.onClickChevronLeft = () => {
      var _a;
      const ul = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tab-bar__tabs');
      ul === null || ul === void 0 ? void 0 : ul.scroll({
        left: ul.scrollLeft - SCROLL_AMOUNT,
        behavior: 'smooth',
      });
      setTimeout(() => this.toggleChevronVisibility(), 300);
    };
    this.fillWidth = undefined;
    this.selectedTab = undefined;
  }
  onSelectedTabChanged() {
    this.selectedTabChanged.emit(this.selectedTab);
  }
  select(tab) {
    if (this.selectedTab === tab) {
      return false;
    }
    this.selectedTab = tab;
    return true;
  }
  get tabs() {
    return Array.from(this.host.querySelectorAll('mdx-tab-element'));
  }
  getTab(tab) {
    return isHTMLMdxTabElementElement(tab) ? tab : this.tabs.find((t) => t.tab === tab);
  }
  componentWillLoad() {
    if ((!this.selectedTab || !this.getTab(this.selectedTab)) && this.tabs.length > 0) {
      this.select(this.tabs[0].tab);
    }
  }
  componentWillRender() {
    const selectedTab = this.getTab(this.selectedTab);
    this.tabs.forEach((tab) => {
      tab.active = false;
    });
    if (selectedTab) {
      selectedTab.active = true;
    }
  }
  componentDidRender() {
    this.toggleChevronVisibility();
  }
  render() {
    return (h(Host, { onTabClick: ({ detail: { tab } }) => {
        this.select(tab);
      } }, h("div", { class: "tab-bar" }, h("mdx-icon-chevron-left", { onClick: this.onClickChevronLeft, class: "tab-bar__chevron tab-bar__chevron__left", size: ICON_SIZES.XS }), h("div", { class: "tab-bar__tabs" }, h("slot", null)), h("mdx-icon-chevron-right", { onClick: this.onClickChevronRight, class: "tab-bar__chevron tab-bar__chevron__right", size: ICON_SIZES.XS }))));
  }
  get host() { return getElement(this); }
  static get watchers() { return {
    "selectedTab": ["onSelectedTabChanged"]
  }; }
};
TabBar.style = tabBarCss;

export { TabBar as mdx_tab_bar };

//# sourceMappingURL=mdx-tab-bar.entry.js.map