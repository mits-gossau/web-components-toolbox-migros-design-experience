{"file":"mdx-chip-group.entry.js","mappings":";;AAAA,MAAM,YAAY,GAAG,8GAA8G,CAAC;AACpI,2BAAe,YAAY;;MCUd,aAAa;;;;6BAKiC,EAAE;2BAG7C,KAAK;;IAMnB,MAAM,CAAC,EAAE,MAAM,EAAsD;QACnE,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC;QACxG,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACvC;iBAAM;gBACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC,CAAC;aACzF;YAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;gBACtB,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACpD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;iBACvB;aACF,CAAC,CAAC;YAEH,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,IAAI,CAAC,aAAa,GAAG,CAAC,YAAY,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC1C;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACrD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC1C;SACF;KACF;IAED,IAAY,KAAK;QACf,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;KAC3D;IAED,iBAAiB;QACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;YACtB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;aAC1B;SACF,CAAC,CAAC;KACJ;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,8DAAQ,CACH,EACP;KACH;;;;;;;","names":[],"sources":["src/components/chip-group/chip-group.scss?tag=mdx-chip-group&encapsulation=shadow","src/components/chip-group/chip-group.tsx"],"sourcesContent":[":host {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: var(--mdx-sys-spacing-fix-s);\n}\n","import { Component, Element, Event, EventEmitter, Host, Listen, Prop, State, h } from '@stencil/core';\n\n/**\n * @slot - For mdx-chip elements\n */\n\n@Component({\n  tag: 'mdx-chip-group',\n  styleUrl: 'chip-group.scss',\n  shadow: true,\n})\nexport class ChipContainer {\n  @Element()\n  host: HTMLMdxChipGroupElement;\n\n  @State()\n  selectedChips: { selected: boolean; chipId: string }[] = [];\n\n  @Prop()\n  multiSelect = false;\n\n  @Event()\n  chipChange: EventEmitter<typeof this.selectedChips>;\n\n  @Listen('toggle', { target: 'body' })\n  toggle({ detail }: CustomEvent<{ selected: boolean; chipId: string }>) {\n    const selectedChip = detail.selected ? { selected: detail.selected, chipId: detail.chipId } : undefined;\n    if (this.multiSelect) {\n      if (selectedChip !== undefined) {\n        this.selectedChips.push(selectedChip);\n      } else {\n        this.selectedChips = this.selectedChips.filter((chip) => chip.chipId !== detail.chipId);\n      }\n\n      this.chipChange.emit(this.selectedChips);\n    } else {\n      this.chips.forEach((chip) => {\n        if (detail.chipId !== chip.chipId && detail.selected) {\n          chip.selected = false;\n        }\n      });\n\n      if (selectedChip !== undefined) {\n        this.selectedChips = [selectedChip];\n        this.chipChange.emit(this.selectedChips);\n      } else if (this.chips.every((chip) => !chip.selected)) {\n        this.selectedChips = [];\n        this.chipChange.emit(this.selectedChips);\n      }\n    }\n  }\n\n  private get chips() {\n    return Array.from(this.host.querySelectorAll('mdx-chip'));\n  }\n\n  componentWillLoad() {\n    this.chips.forEach((chip) => {\n      if (!this.multiSelect) {\n        chip.singleSelect = true;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"version":3}