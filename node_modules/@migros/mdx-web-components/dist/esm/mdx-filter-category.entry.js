import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-399d9287.js';
import { B as BADGE_SIZES, a as BADGE_VARIANTS } from './exports-ac949071.js';
import { B as BUTTON_VARIANTS } from './exports-1631f205.js';
import { I as ICON_SIZES } from './exports-f063c20a.js';
import { L as LINK_VARIANTS } from './exports-0b2cd507.js';

const filterCategoryCss = ":host .filter-category__toggle-button{display:block;margin-bottom:var(--mdx-comp-select-gap-content-below)}:host .filter-category__dot-spacer{color:var(--mdx-comp-filter-flyout-elements-header-dot-spacer-color-default)}:host mdx-filter-flyout{position:absolute;width:var(--mdx-comp-filter-flyout-sizing-width);max-height:0;overflow:hidden;transition:var(--mdx-comp-flyout-transition-expand-collapse)}:host .filters,:host .categories{overflow:hidden auto}:host([view=category]) .filters{display:none}:host([view=filters]) .categories{display:none}:host([open]) mdx-filter-flyout{max-height:100vh;box-shadow:var(--mdx-comp-flyout-box-shadow-default);transition:var(--mdx-comp-flyout-transition-expand-collapse)}";

const FilterCat = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.filterChanged = createEvent(this, "filterChanged", 7);
    this.filterSubmit = createEvent(this, "filterSubmit", 7);
    this.open = false;
    this.view = 'category';
    this.buttonLabel = undefined;
    this.closeButtonAriaLabel = undefined;
    this.headerTitle = undefined;
    this.submitButtonText = undefined;
    this.backButtonText = undefined;
    this.resetLinkText = undefined;
    this.resetAllLinkText = undefined;
    this.selectAllLinkText = undefined;
    this.selectedItems = {};
    this.selectedCategoryId = undefined;
    this.isMobile = window.innerWidth <= 768;
  }
  toggleCheckboxHandler(event) {
    var _a, _b, _c;
    if (this.selectedCategoryId === undefined) {
      return;
    }
    if (!event.detail.checked) {
      this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.selectedCategoryId]: (_a = this.selectedItems[this.selectedCategoryId]) === null || _a === void 0 ? void 0 : _a.filter((item) => item.value !== event.detail.value) });
    }
    else if (event.detail.checked &&
      !((_b = this.selectedItems[this.selectedCategoryId]) === null || _b === void 0 ? void 0 : _b.find((item) => item.value === event.detail.value))) {
      this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.selectedCategoryId]: [
          ...((_c = this.selectedItems[this.selectedCategoryId]) !== null && _c !== void 0 ? _c : []),
          { label: event.detail.label, value: event.detail.value },
        ] });
    }
    this.filterChanged.emit(this.selectedItems);
  }
  handleOutsideClick(event) {
    if (this.open && !this.hostElement.contains(event.target)) {
      this.open = false;
    }
  }
  filterFlyoutCloseHandler() {
    this.open = false;
  }
  categoryClickHandler(event) {
    var _a, _b;
    this.view = 'filters';
    this.selectedCategoryId = event.detail.categoryId;
    const categoryFilters = (_a = this.selectedCategoryItem) === null || _a === void 0 ? void 0 : _a.childNodes;
    if (categoryFilters) {
      (_b = this.hostFiltersPlaceholder) === null || _b === void 0 ? void 0 : _b.replaceChildren();
      categoryFilters.forEach((filter) => {
        var _a;
        (_a = this.hostFiltersPlaceholder) === null || _a === void 0 ? void 0 : _a.append(filter.cloneNode(true));
      });
    }
  }
  onWindowResize() {
    this.isMobile = window.innerWidth <= 768;
  }
  get hostFiltersPlaceholder() {
    var _a;
    return (_a = this.hostElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#filter_placeholder');
  }
  clearFilterHandler(categoryId) {
    var _a;
    if (categoryId !== undefined) {
      this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [categoryId]: [] });
    }
    else {
      this.selectedItems = {};
    }
    (_a = this.hostFiltersPlaceholder) === null || _a === void 0 ? void 0 : _a.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
      checkbox.checked = false;
    });
    this.filterChanged.emit(this.selectedItems);
  }
  selectAll() {
    var _a;
    (_a = this.hostFiltersPlaceholder) === null || _a === void 0 ? void 0 : _a.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
      var _a, _b;
      checkbox.checked = true;
      if (this.selectedCategoryId === undefined) {
        return;
      }
      if (!((_a = this.selectedItems[this.selectedCategoryId]) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === checkbox.value))) {
        this.selectedItems = Object.assign(Object.assign({}, this.selectedItems), { [this.selectedCategoryId]: [
            ...((_b = this.selectedItems[this.selectedCategoryId]) !== null && _b !== void 0 ? _b : []),
            { label: checkbox.label, value: checkbox.value },
          ] });
      }
    });
    this.filterChanged.emit(this.selectedItems);
  }
  componentDidRender() {
    var _a, _b;
    if (this.selectedCategoryId !== undefined) {
      (_a = this.hostFiltersPlaceholder) === null || _a === void 0 ? void 0 : _a.querySelectorAll('mdx-checkbox').forEach((checkbox) => {
        var _a;
        checkbox.checked =
          this.selectedCategoryId != undefined &&
            !!((_a = this.selectedItems[this.selectedCategoryId]) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === checkbox.value));
      });
    }
    else {
      (_b = this.hostElement) === null || _b === void 0 ? void 0 : _b.querySelectorAll('mdx-filter-category-item').forEach((category) => {
        const categoryId = category.getAttribute('category-id');
        if (!categoryId) {
          return;
        }
        const numberOfSelectedFilters = this.getSelectedFiltersCount(categoryId);
        if (numberOfSelectedFilters === 0) {
          category.removeAttribute('badge');
          return;
        }
        category.setAttribute('badge', numberOfSelectedFilters.toString());
      });
    }
  }
  get selectedCategoryItem() {
    var _a;
    return this.selectedCategoryId !== undefined
      ? Array.from((_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll('mdx-filter-category-item')).find((item) => item.getAttribute('category-id') === this.selectedCategoryId)
      : undefined;
  }
  getSelectedFiltersCount(categoryId) {
    var _a, _b;
    return categoryId !== undefined
      ? (_b = (_a = this.selectedItems[categoryId]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0
      : Object.values(this.selectedItems).reduce((acc, curr) => acc + curr.length, 0);
  }
  render() {
    var _a;
    const selectedFilterCount = this.getSelectedFiltersCount(this.selectedCategoryId);
    return (h(Host, null, this.isMobile ? (h("mdx-icon-button", { class: "filter-category__toggle-button", onClick: () => (this.open = !this.open), "aria-expanded": this.open ? 'true' : 'false', ariaLabel: this.buttonLabel }, h("mdx-icon-sliders", { size: ICON_SIZES.SM }))) : (h("mdx-button", { class: "filter-category__toggle-button", onClick: () => (this.open = !this.open), "aria-expanded": this.open ? 'true' : 'false' }, h("mdx-icon-sliders", { size: ICON_SIZES.SM }), " ", this.buttonLabel)), h("mdx-filter-flyout", { open: this.open, role: "dialog", "aria-label": this.headerTitle }, h("mdx-filter-flyout-header", { closeButtonAriaLabel: this.closeButtonAriaLabel }, this.selectedCategoryId === undefined ? (h("h2", { slot: "header" }, this.headerTitle)) : (h("h2", { slot: "header" }, (_a = this.selectedCategoryItem) === null || _a === void 0 ? void 0 : _a.getAttribute('name'))), selectedFilterCount > 0 ? (h("mdx-badge", { slot: "header", size: BADGE_SIZES.MD, variant: BADGE_VARIANTS.SECONDARY }, selectedFilterCount)) : null), h("mdx-filter-flyout-list", { class: "categories" }, h("mdx-link", { slot: "controls", variant: LINK_VARIANTS.STANDALONE, onClick: () => this.clearFilterHandler() }, this.resetAllLinkText), h("slot", { name: "categories", slot: "items" })), h("mdx-filter-flyout-list", { class: "filters" }, h("mdx-link", { slot: "controls", variant: LINK_VARIANTS.STANDALONE, onClick: () => this.selectAll() }, this.selectAllLinkText), h("svg", { class: "filter-category__dot-spacer", width: "2", height: "2", slot: "controls", viewBox: "0 0 2 2", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("circle", { cx: "1", cy: "1", r: "1", fill: "currentColor" })), h("mdx-link", { slot: "controls", variant: LINK_VARIANTS.STANDALONE, onClick: () => this.clearFilterHandler(this.selectedCategoryId) }, this.resetLinkText), h("div", { id: "filter_placeholder", slot: "items" })), h("mdx-filter-flyout-footer", null, h("mdx-button", { "full-width": true, slot: "button", onClick: () => {
        this.filterSubmit.emit(this.selectedItems);
        this.open = false;
      } }, this.submitButtonText), this.selectedCategoryId != undefined && (h("mdx-button", { "full-width": true, slot: "button", variant: BUTTON_VARIANTS.TERTIARY, onClick: () => {
        this.selectedCategoryId = undefined;
        this.view = 'category';
      } }, this.backButtonText))))));
  }
  get hostElement() { return getElement(this); }
};
FilterCat.style = filterCategoryCss;

export { FilterCat as mdx_filter_category };

//# sourceMappingURL=mdx-filter-category.entry.js.map