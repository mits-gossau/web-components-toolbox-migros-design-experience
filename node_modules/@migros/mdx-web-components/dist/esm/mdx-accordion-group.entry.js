import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-399d9287.js';

const accordionGroupCss = ":host{box-sizing:border-box;display:flex;flex-direction:column;gap:var(--mdx-comp-accordion-gap-accordion-elements);padding:0}";

const isHTMLMdxAccordionItemElement = (element) => {
  if (typeof element === 'object' && typeof element.item === 'string') {
    return true;
  }
  return false;
};
const AccordionContainer = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.accordionChange = createEvent(this, "accordionChange", 7);
    this.selectedAccordion = undefined;
  }
  onAccordionChange() {
    this.accordionChange.emit(this.selectedAccordion);
    if (this.selectedAccordion) {
      const activeAccordion = this.getItems(this.selectedAccordion);
      this.accordions.forEach((accordion) => {
        if ((activeAccordion === null || activeAccordion === void 0 ? void 0 : activeAccordion.item) !== accordion.item) {
          accordion.open = false;
        }
      });
    }
  }
  get accordions() {
    return Array.from(this.host.querySelectorAll('mdx-accordion'));
  }
  getItems(accordion) {
    return isHTMLMdxAccordionItemElement(accordion) ? accordion : this.accordions.find((t) => t.item === accordion);
  }
  select(item) {
    if (this.selectedAccordion === item) {
      return false;
    }
    this.selectedAccordion = item;
    return true;
  }
  render() {
    return (h(Host, { onAccordionClick: ({ detail: { item, open } }) => {
        if (open) {
          this.select(item);
        }
      } }, h("slot", { name: "accordions" })));
  }
  get host() { return getElement(this); }
  static get watchers() { return {
    "selectedAccordion": ["onAccordionChange"]
  }; }
};
AccordionContainer.style = accordionGroupCss;

export { AccordionContainer as mdx_accordion_group };

//# sourceMappingURL=mdx-accordion-group.entry.js.map