import { r as registerInstance, h, g as getElement } from './index-399d9287.js';
import { d as debounce } from './defer-90edfec0.js';

var TOOLTIP_POSITIONS;
(function (TOOLTIP_POSITIONS) {
  TOOLTIP_POSITIONS["TOP"] = "top";
  TOOLTIP_POSITIONS["BOTTOM"] = "bottom";
  TOOLTIP_POSITIONS["LEFT"] = "left";
  TOOLTIP_POSITIONS["RIGHT"] = "right";
})(TOOLTIP_POSITIONS || (TOOLTIP_POSITIONS = {}));
var TOOLTIP_ALIGNMENT;
(function (TOOLTIP_ALIGNMENT) {
  TOOLTIP_ALIGNMENT["CENTER"] = "center";
  TOOLTIP_ALIGNMENT["START"] = "start";
  TOOLTIP_ALIGNMENT["END"] = "end";
})(TOOLTIP_ALIGNMENT || (TOOLTIP_ALIGNMENT = {}));

const tooltipCss = ":host .tooltip{box-sizing:border-box;position:relative;display:inline-block}:host ::slotted([slot=title]){all:unset;font:var(--mdx-comp-tooltip-container-font-title);font-weight:var(--mdx-comp-tooltip-container-font-weight-title);color:var(--mdx-comp-tooltip-container-color-title);grid-area:title}:host ::slotted([slot=content]){grid-area:text}:host ::slotted([slot=icon]){grid-area:icon}:host .tooltip__flyout{display:none}:host .tooltip__flyout.tooltip__flyout--is-open{position:absolute;z-index:1;display:grid;grid-template:\"icon title\" auto \"icon text\" auto;align-items:start;column-gap:var(--mdx-comp-tooltip-container-gap-icon-text);row-gap:var(--mdx-comp-tooltip-container-gap-text-title);font:var(--mdx-comp-tooltip-container-font-paragraph);color:var(--mdx-comp-tooltip-container-color-text);width:var(--mdx-comp-tooltip-container-sizing-width);padding:var(--mdx-comp-tooltip-container-padding-default);background-color:var(--mdx-comp-tooltip-container-background-color-default);border-color:var(--mdx-comp-tooltip-container-border-color-default);border-radius:var(--mdx-comp-tooltip-container-border-radius-default);box-shadow:var(--mdx-comp-tooltip-shadow-default)}:host .tooltip__flyout.tooltip__flyout--is-open::after{content:\"\";position:absolute;display:block;width:var(--mdx-comp-tooltip-arrow-sizing-width);height:var(--mdx-comp-tooltip-arrow-sizing-width);background-color:var(--mdx-comp-tooltip-container-background-color-default);border-radius:var(--mdx-comp-tooltip-arrow-border-radius-point) 0}:host([position=top]) .tooltip__flyout{bottom:100%;left:-0.5rem;margin-bottom:1rem}:host([position=top]) .tooltip__flyout::after{left:1rem;top:calc(100% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2);transform:rotate(45deg)}:host([position=bottom]) .tooltip__flyout{top:100%;left:-0.5rem;margin-top:1rem}:host([position=bottom]) .tooltip__flyout::after{left:1rem;bottom:calc(100% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2);transform:rotate(45deg)}:host([position=top][alignment=center]) .tooltip__flyout,:host([position=bottom][alignment=center]) .tooltip__flyout{left:50%;transform:translateX(-50%)}:host([position=top][alignment=center]) .tooltip__flyout::after,:host([position=bottom][alignment=center]) .tooltip__flyout::after{left:calc(50% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2)}:host([position=top][alignment=end]) .tooltip__flyout,:host([position=bottom][alignment=end]) .tooltip__flyout{right:-0.5rem;left:initial}:host([position=top][alignment=end]) .tooltip__flyout::after,:host([position=bottom][alignment=end]) .tooltip__flyout::after{left:initial;right:1rem}:host([position=left]) .tooltip__flyout{top:-0.5rem;right:100%;margin-right:1rem}:host([position=left]) .tooltip__flyout::after{top:1rem;left:calc(100% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2);transform:rotate(-45deg)}:host([position=right]) .tooltip__flyout{top:-0.5rem;left:100%;margin-left:1rem}:host([position=right]) .tooltip__flyout::after{top:1rem;right:calc(100% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2);transform:rotate(-45deg)}:host([position=left][alignment=center]) .tooltip__flyout,:host([position=right][alignment=center]) .tooltip__flyout{top:50%;transform:translateY(-50%)}:host([position=left][alignment=center]) .tooltip__flyout::after,:host([position=right][alignment=center]) .tooltip__flyout::after{top:calc(50% - var(--mdx-comp-tooltip-arrow-sizing-width) / 2)}:host([position=left][alignment=end]) .tooltip__flyout,:host([position=right][alignment=end]) .tooltip__flyout{bottom:-0.5rem;top:initial}:host([position=left][alignment=end]) .tooltip__flyout::after,:host([position=right][alignment=end]) .tooltip__flyout::after{top:initial;bottom:1rem}:host([position=right][alignment=start][hide-arrow]) .tooltip__flyout::after,:host([position=right][alignment=center][hide-arrow]) .tooltip__flyout::after,:host([position=right][alignment=end][hide-arrow]) .tooltip__flyout::after,:host([position=left][alignment=start][hide-arrow]) .tooltip__flyout::after,:host([position=left][alignment=center][hide-arrow]) .tooltip__flyout::after,:host([position=left][alignment=end][hide-arrow]) .tooltip__flyout::after,:host([position=bottom][alignment=start][hide-arrow]) .tooltip__flyout::after,:host([position=bottom][alignment=center][hide-arrow]) .tooltip__flyout::after,:host([position=bottom][alignment=end][hide-arrow]) .tooltip__flyout::after,:host([position=top][alignment=start][hide-arrow]) .tooltip__flyout::after,:host([position=top][alignment=center][hide-arrow]) .tooltip__flyout::after,:host([position=top][alignment=end][hide-arrow]) .tooltip__flyout::after{display:none}";

const Tooltip = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tooltipId = `mdx-tooltip-${Math.random().toString(36).substring(2, 15)}`;
    this.updateTooltipPosition = debounce(this._updateTooltipPosition.bind(this), 50);
    this.position = TOOLTIP_POSITIONS.RIGHT;
    this.alignment = TOOLTIP_ALIGNMENT.START;
    this.hideArrow = false;
    this.openOnHover = false;
    this.autopositionTooltip = false;
    this.isOpen = false;
  }
  handleResize() {
    if (this.isOpen && this.autopositionTooltip) {
      this.updateTooltipPosition();
    }
  }
  handleScroll() {
    if (this.isOpen && this.autopositionTooltip) {
      this.updateTooltipPosition();
    }
  }
  handleOutsideClick(event) {
    if (!this.host.contains(event.target)) {
      this.isOpen = false;
    }
  }
  handleButtonClick() {
    if (!this.openOnHover) {
      this.isOpen = !this.isOpen;
    }
  }
  handleMouseEnter() {
    if (this.openOnHover) {
      this.isOpen = true;
    }
  }
  handleMouseLeave() {
    if (this.openOnHover) {
      this.isOpen = false;
    }
  }
  componentDidRender() {
    var _a, _b, _c, _d, _e, _f;
    this.host.children[0].setAttribute('aria-describedby', this.tooltipId);
    this.host.children[0].setAttribute('aria-haspopup', 'true');
    this.host.children[0].setAttribute('aria-expanded', this.isOpen ? 'true' : 'false');
    (_b = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tooltip__flyout')) === null || _b === void 0 ? void 0 : _b.setAttribute('id', this.tooltipId);
    (_d = (_c = this.host.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('.tooltip__flyout')) === null || _d === void 0 ? void 0 : _d.setAttribute('aria-hidden', this.isOpen ? 'false' : 'true');
    (_f = (_e = this.host.shadowRoot) === null || _e === void 0 ? void 0 : _e.querySelector('.tooltip__flyout')) === null || _f === void 0 ? void 0 : _f.setAttribute('role', 'tooltip');
    if (this.isOpen && this.autopositionTooltip) {
      this.updateTooltipPosition();
    }
  }
  hasIconSlot() {
    return !!this.host.querySelector('[slot="icon"]');
  }
  _updateTooltipPosition() {
    var _a;
    const flyout = (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tooltip__flyout');
    if (!flyout) {
      return;
    }
    const flyoutRect = flyout.getBoundingClientRect();
    if (flyoutRect.left < -20 && flyoutRect.width * 2 < window.innerWidth) {
      this.position = TOOLTIP_POSITIONS.RIGHT;
      if (flyoutRect.top > window.innerHeight / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.END;
      }
      else if (flyoutRect.top < window.innerHeight / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.START;
      }
      else {
        this.alignment = TOOLTIP_ALIGNMENT.CENTER;
      }
    }
    if (flyoutRect.right > window.innerWidth + 20 && flyoutRect.width * 2 < window.innerWidth) {
      this.position = TOOLTIP_POSITIONS.LEFT;
      if (flyoutRect.top > window.innerHeight / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.END;
      }
      else if (flyoutRect.top < window.innerHeight / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.START;
      }
      else {
        this.alignment = TOOLTIP_ALIGNMENT.CENTER;
      }
    }
    if (flyoutRect.top < -20 && flyoutRect.height * 2 < window.innerHeight) {
      this.position = TOOLTIP_POSITIONS.BOTTOM;
      if (flyoutRect.right > window.innerWidth / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.END;
      }
      else if (flyoutRect.right < window.innerWidth / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.START;
      }
      else {
        this.alignment = TOOLTIP_ALIGNMENT.CENTER;
      }
    }
    if (flyoutRect.bottom > window.innerHeight + 20 && flyoutRect.height * 2 < window.innerHeight) {
      this.position = TOOLTIP_POSITIONS.TOP;
      if (flyoutRect.right > window.innerWidth / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.END;
      }
      else if (flyoutRect.right < window.innerWidth / 4) {
        this.alignment = TOOLTIP_ALIGNMENT.START;
      }
      else {
        this.alignment = TOOLTIP_ALIGNMENT.CENTER;
      }
    }
  }
  render() {
    return (h("div", { class: `tooltip ${this.position} ${this.isOpen ? 'open' : ''}`, onMouseEnter: () => this.handleMouseEnter(), onMouseLeave: () => this.handleMouseLeave(), onFocusout: () => (this.isOpen = false), onFocusin: () => (this.isOpen = true), onClick: () => this.handleButtonClick(), "aria-haspopup": "true" }, h("slot", null), h("div", { class: `tooltip__flyout${this.hasIconSlot() ? ' tooltip__flyout--has-icon' : ''}${this.isOpen ? ' tooltip__flyout--is-open' : ''}` }, h("slot", { name: "icon" }), h("slot", { name: "title" }), h("slot", { name: "content" }))));
  }
  get host() { return getElement(this); }
};
Tooltip.style = tooltipCss;

export { Tooltip as mdx_tooltip };

//# sourceMappingURL=mdx-tooltip.entry.js.map