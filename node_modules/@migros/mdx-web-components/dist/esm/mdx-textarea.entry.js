import { r as registerInstance, c as createEvent, h } from './index-7e8279cb.js';

const textareaCss = ":host .textarea{box-sizing:border-box;color:var(--mdx-comp-textarea-label-color-default);display:flex;flex-direction:column;margin-bottom:var(--mdx-comp-textarea-gap-content-below)}:host .textarea--focused{border-radius:var(--mdx-comp-keyboard-focus-border-radius-default);color:var(--mdx-comp-textarea-label-color-focus);outline-color:var(--mdx-comp-keyboard-focus-color-default);outline-style:solid;outline-width:var(--mdx-comp-keyboard-focus-border-width-default);outline-offset:2px}:host .textarea--focused .textarea__field{background-color:var(--mdx-comp-textarea-background-color-focus);border-color:var(--mdx-comp-textarea-border-color-focus);color:var(--mdx-comp-textarea-input-color-focus)}:host .textarea--focused .asterisk{color:var(--mdx-comp-textarea-asterisk-color-focus)}:host .textarea--focused .textarea__label-text{color:var(--mdx-comp-textarea-label-color-focus)}:host .textarea__label-text{font:var(--mdx-comp-textarea-font-label);color:var(--mdx-comp-textarea-label-color-default)}:host .textarea__field{background-color:var(--mdx-comp-textarea-background-color-default);border-radius:var(--mdx-comp-textarea-border-radius-default);border-width:var(--mdx-comp-textarea-border-width-default);border-style:solid;box-shadow:var(--mdx-comp-textarea-box-shadow-default);font:var(--mdx-comp-textarea-font-default);margin:var(--mdx-comp-textarea-gap-label-textarea) 0 var(--mdx-comp-textarea-gap-content-below) 0;padding:var(--mdx-comp-textarea-padding-vertical-default) var(--mdx-comp-textarea-padding-horizontal-default);height:var(--mdx-comp-textarea-sizing-vertical-box-min);resize:none;box-sizing:border-box;outline:none}:host .textarea__field::placeholder{color:var(--mdx-comp-textarea-placeholder-color-default)}:host .textarea__field:focus-within{background-color:var(--mdx-comp-textarea-background-color-focus);border-color:var(--mdx-comp-textarea-border-color-focus);box-shadow:var(--mdx-comp-textarea-box-shadow-focus);color:var(--mdx-comp-textarea-input-color-focus)}:host .textarea__field:focus-within::placeholder{color:var(--mdx-comp-textarea-placeholder-color-focus)}:host .textarea__information-wrapper{display:flex;flex-direction:row;justify-content:space-between;font:var(--mdx-comp-textarea-font-supporting)}:host .textarea__hint{color:var(--mdx-comp-textarea-hint-counter-color-default)}:host .textarea:focus-within :host .textarea__information-wrapper :host .textarea__hint{color:var(--mdx-comp-textarea-hint-counter-color-focus)}:host([required]) .asterisk{color:var(--mdx-comp-textarea-asterisk-color-default);margin-left:var(--mdx-comp-textarea-gap-label-asterisk)}:host([disabled]) .asterisk{color:var(--mdx-comp-textarea-asterisk-color-disabled)}:host([disabled]) .textarea__label-text{color:var(--mdx-comp-textarea-label-color-disabled)}:host([disabled]) .textarea__field{background-color:var(--mdx-comp-textarea-background-color-disabled);color:var(--mdx-comp-textarea-input-color-disabled);box-shadow:var(--mdx-comp-textarea-box-shadow-disabled);border-color:var(--mdx-comp-textarea-border-color-disabled)}:host([disabled]) .textarea__field::placeholder{color:var(--mdx-comp-textarea-placeholder-color-disabled);background-color:var(--mdx-comp-textarea-background-color-disabled)}:host([disabled]) .textarea__hint,:host([disabled]) .textarea__error-message{color:var(--mdx-comp-textarea-hint-counter-color-disabled)}:host([error]) .textarea__field{background-color:var(--mdx-comp-textarea-background-color-error);border-color:var(--mdx-comp-textarea-border-color-error);box-shadow:var(--mdx-comp-textarea-box-shadow-error);color:var(--mdx-comp-textarea-input-color-error)}:host([error]) .textarea__field::placeholder{color:var(--mdx-comp-textarea-placeholder-color-error)}:host([error]) .textarea__label-text{color:var(--mdx-comp-textarea-label-color-error)}";
const MdxTextareaStyle0 = textareaCss;

const Textarea = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.inputChange = createEvent(this, "inputChange", 7);
        this.disabled = false;
        this.required = false;
        this.label = undefined;
        this.value = '';
        this.placeholder = '';
        this.hint = undefined;
        this.error = undefined;
        this.counter = undefined;
        this.focused = false;
        this.keyboardEvent = false;
    }
    handleClick() {
        this.keyboardEvent = false;
    }
    handleKeyDown(event) {
        if (event.key === 'Tab') {
            this.keyboardEvent = true;
        }
    }
    handleValue(e) {
        const v = e.currentTarget.value;
        if (typeof this.counter === 'number' && (v.length || 0) > this.counter) {
            this.value = v.slice(0, Math.min(v.length, this.counter));
            e.currentTarget.value = this.value;
        }
        else {
            this.value = v;
        }
        this.inputChange.emit({ input: this.value });
    }
    render() {
        return (h("label", { key: 'aa726f83461c993045e735badfc00eb21c9e9d7d', class: `textarea ${this.focused && 'textarea--focused'}` }, h("div", { key: '6d4cce75785d6f09e4d5f1ef08f7d2f6e79c06c3', class: "textarea__label-text" }, this.label, " ", this.required && h("span", { class: "asterisk" }, "*")), h("textarea", { key: '359ec15453d0d182e8fdc6a022f2aeb45bfc41ce', class: "textarea__field", onFocus: () => this.keyboardEvent && (this.focused = true), onBlur: () => (this.focused = false), onInput: (e) => {
                this.handleValue(e);
                const t = e.currentTarget;
                t.style.height = '0';
                const scrollHeight = t.scrollHeight;
                t.style.height = `clamp(var(--mdx-comp-textarea-sizing-vertical-box-min),
              ${scrollHeight}px, var(--mdx-comp-textarea-sizing-vertical-box-max))`;
            }, required: this.required, placeholder: this.placeholder, disabled: this.disabled, value: this.value }), h("div", { key: '344934b614b7c4aca1156b21227b451597d706ae', class: "textarea__information-wrapper" }, h("div", { key: 'cd2787c5ef9f2980849dcfb011e37802b829442f' }, this.hint && (typeof this.error === 'undefined' || this.error === '') && (h("span", { class: "textarea__hint" }, this.hint)), this.error && h("mdx-error-hint", { class: "textarea__error-message", text: this.error })), this.counter && this.counter > 0 && (h("span", { class: "textarea__counter" }, this.value.length, " / ", this.counter)))));
    }
};
Textarea.style = MdxTextareaStyle0;

export { Textarea as mdx_textarea };

//# sourceMappingURL=mdx-textarea.entry.js.map